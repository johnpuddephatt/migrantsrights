/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk"] = self["webpackChunk"] || []).push([["/scripts/customizer"],{

/***/ "./resources/scripts/customizer.js":
/*!*****************************************!*\
  !*** ./resources/scripts/customizer.js ***!
  \*****************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/typeof */ \"./node_modules/@babel/runtime/helpers/esm/typeof.js\");\n/* module decorator */ module = __webpack_require__.hmd(module);\n/* provided dependency */ var $ = __webpack_require__(/*! jquery */ \"jquery\");\n\n/* eslint-disable */\n\n/*! Select2 4.0.13 | https://github.com/select2/select2/blob/master/LICENSE.md */\n\n!function (n) {\n  'function' == typeof define && __webpack_require__.amdO ? define(['jquery'], n) : 'object' == ( false ? 0 : (0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__.default)(module)) && module.exports ? module.exports = function (e, t) {\n    return void 0 === t && (t = 'undefined' != typeof window ? __webpack_require__(/*! jquery */ \"jquery\") : __webpack_require__(/*! jquery */ \"jquery\")(e)), n(t), t;\n  } : n(jQuery);\n}(function (d) {\n  var e = function () {\n    if (d && d.fn && d.fn.select2 && d.fn.select2.amd) var e = d.fn.select2.amd;\n\n    var t, n, i, h, o, _s, f, g, m, v, y, _, r, a, w, l;\n\n    function b(e, t) {\n      return r.call(e, t);\n    }\n\n    function c(e, t) {\n      var n,\n          i,\n          r,\n          o,\n          s,\n          a,\n          l,\n          c,\n          u,\n          d,\n          p,\n          h = t && t.split('/'),\n          f = y.map,\n          g = f && f['*'] || {};\n\n      if (e) {\n        for (s = (e = e.split('/')).length - 1, y.nodeIdCompat && w.test(e[s]) && (e[s] = e[s].replace(w, '')), '.' === e[0].charAt(0) && h && (e = h.slice(0, h.length - 1).concat(e)), u = 0; u < e.length; u++) {\n          if ('.' === (p = e[u])) e.splice(u, 1), u -= 1;else if ('..' === p) {\n            if (0 === u || 1 === u && '..' === e[2] || '..' === e[u - 1]) continue;\n            0 < u && (e.splice(u - 1, 2), u -= 2);\n          }\n        }\n\n        e = e.join('/');\n      }\n\n      if ((h || g) && f) {\n        for (u = (n = e.split('/')).length; 0 < u; u -= 1) {\n          if (i = n.slice(0, u).join('/'), h) for (d = h.length; 0 < d; d -= 1) {\n            if (r = (r = f[h.slice(0, d).join('/')]) && r[i]) {\n              o = r, a = u;\n              break;\n            }\n          }\n          if (o) break;\n          !l && g && g[i] && (l = g[i], c = u);\n        }\n\n        !o && l && (o = l, a = c), o && (n.splice(0, a, o), e = n.join('/'));\n      }\n\n      return e;\n    }\n\n    function A(t, n) {\n      return function () {\n        var e = a.call(arguments, 0);\n        return 'string' != typeof e[0] && 1 === e.length && e.push(null), _s.apply(h, e.concat([t, n]));\n      };\n    }\n\n    function x(t) {\n      return function (e) {\n        m[t] = e;\n      };\n    }\n\n    function D(e) {\n      if (b(v, e)) {\n        var t = v[e];\n        delete v[e], _[e] = !0, o.apply(h, t);\n      }\n\n      if (!b(m, e) && !b(_, e)) throw new Error('No ' + e);\n      return m[e];\n    }\n\n    function u(e) {\n      var t,\n          n = e ? e.indexOf('!') : -1;\n      return -1 < n && (t = e.substring(0, n), e = e.substring(n + 1, e.length)), [t, e];\n    }\n\n    function S(e) {\n      return e ? u(e) : [];\n    }\n\n    return e && e.requirejs || (e ? n = e : e = {}, m = {}, v = {}, y = {}, _ = {}, r = Object.prototype.hasOwnProperty, a = [].slice, w = /\\.js$/, f = function f(e, t) {\n      var n,\n          i = u(e),\n          r = i[0],\n          o = t[1];\n      return e = i[1], r && (n = D(r = c(r, o))), r ? e = n && n.normalize ? n.normalize(e, function (t) {\n        return function (e) {\n          return c(e, t);\n        };\n      }(o)) : c(e, o) : (r = (i = u(e = c(e, o)))[0], e = i[1], r && (n = D(r))), {\n        f: r ? r + '!' + e : e,\n        n: e,\n        pr: r,\n        p: n\n      };\n    }, g = {\n      require: function require(e) {\n        return A(e);\n      },\n      exports: function exports(e) {\n        var t = m[e];\n        return void 0 !== t ? t : m[e] = {};\n      },\n      module: function module(e) {\n        return {\n          id: e,\n          uri: '',\n          exports: m[e],\n          config: function (e) {\n            return function () {\n              return y && y.config && y.config[e] || {};\n            };\n          }(e)\n        };\n      }\n    }, o = function o(e, t, n, i) {\n      var r,\n          o,\n          s,\n          a,\n          l,\n          c,\n          u,\n          d = [],\n          p = (0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__.default)(n);\n\n      if (c = S(i = i || e), 'undefined' == p || 'function' == p) {\n        for (t = !t.length && n.length ? ['require', 'exports', 'module'] : t, l = 0; l < t.length; l += 1) {\n          if ('require' === (o = (a = f(t[l], c)).f)) d[l] = g.require(e);else if ('exports' === o) d[l] = g.exports(e), u = !0;else if ('module' === o) r = d[l] = g.module(e);else if (b(m, o) || b(v, o) || b(_, o)) d[l] = D(o);else {\n            if (!a.p) throw new Error(e + ' missing ' + o);\n            a.p.load(a.n, A(i, !0), x(o), {}), d[l] = m[o];\n          }\n        }\n\n        s = n ? n.apply(m[e], d) : void 0, e && (r && r.exports !== h && r.exports !== m[e] ? m[e] = r.exports : s === h && u || (m[e] = s));\n      } else e && (m[e] = n);\n    }, t = n = _s = function s(e, t, n, i, r) {\n      if ('string' == typeof e) return g[e] ? g[e](t) : D(f(e, S(t)).f);\n\n      if (!e.splice) {\n        if ((y = e).deps && _s(y.deps, y.callback), !t) return;\n        t.splice ? (e = t, t = n, n = null) : e = h;\n      }\n\n      return t = t || function () {}, 'function' == typeof n && (n = i, i = r), i ? o(h, e, t, n) : setTimeout(function () {\n        o(h, e, t, n);\n      }, 4), _s;\n    }, _s.config = function (e) {\n      return _s(e);\n    }, t._defined = m, (i = function i(e, t, n) {\n      if ('string' != typeof e) throw new Error('See almond README: incorrect module build, no module name');\n      t.splice || (n = t, t = []), b(m, e) || b(v, e) || (v[e] = [e, t, n]);\n    }).amd = {\n      jQuery: !0\n    }, e.requirejs = t, e.require = n, e.define = i), e.define('almond', function () {}), e.define('jquery', [], function () {\n      var e = d || $;\n      return null == e && console && console.error && console.error('Select2: An instance of jQuery or a jQuery-compatible library was not found. Make sure that you are including jQuery before Select2 on your web page.'), e;\n    }), e.define('select2/utils', ['jquery'], function (o) {\n      var r = {};\n\n      function u(e) {\n        var t = e.prototype,\n            n = [];\n\n        for (var i in t) {\n          'function' == typeof t[i] && 'constructor' !== i && n.push(i);\n        }\n\n        return n;\n      }\n\n      r.Extend = function (e, t) {\n        var n = {}.hasOwnProperty;\n\n        function i() {\n          this.constructor = e;\n        }\n\n        for (var r in t) {\n          n.call(t, r) && (e[r] = t[r]);\n        }\n\n        return i.prototype = t.prototype, e.prototype = new i(), e.__super__ = t.prototype, e;\n      }, r.Decorate = function (i, r) {\n        var e = u(r),\n            t = u(i);\n\n        function o() {\n          var e = Array.prototype.unshift,\n              t = r.prototype.constructor.length,\n              n = i.prototype.constructor;\n          0 < t && (e.call(arguments, i.prototype.constructor), n = r.prototype.constructor), n.apply(this, arguments);\n        }\n\n        r.displayName = i.displayName, o.prototype = new function () {\n          this.constructor = o;\n        }();\n\n        for (var n = 0; n < t.length; n++) {\n          var s = t[n];\n          o.prototype[s] = i.prototype[s];\n        }\n\n        function a(e) {\n          var t = function t() {};\n\n          e in o.prototype && (t = o.prototype[e]);\n          var n = r.prototype[e];\n          return function () {\n            return Array.prototype.unshift.call(arguments, t), n.apply(this, arguments);\n          };\n        }\n\n        for (var l = 0; l < e.length; l++) {\n          var c = e[l];\n          o.prototype[c] = a(c);\n        }\n\n        return o;\n      };\n\n      function e() {\n        this.listeners = {};\n      }\n\n      e.prototype.on = function (e, t) {\n        this.listeners = this.listeners || {}, e in this.listeners ? this.listeners[e].push(t) : this.listeners[e] = [t];\n      }, e.prototype.trigger = function (e) {\n        var t = Array.prototype.slice,\n            n = t.call(arguments, 1);\n        this.listeners = this.listeners || {}, null == n && (n = []), 0 === n.length && n.push({}), (n[0]._type = e) in this.listeners && this.invoke(this.listeners[e], t.call(arguments, 1)), '*' in this.listeners && this.invoke(this.listeners['*'], arguments);\n      }, e.prototype.invoke = function (e, t) {\n        for (var n = 0, i = e.length; n < i; n++) {\n          e[n].apply(this, t);\n        }\n      }, r.Observable = e, r.generateChars = function (e) {\n        for (var t = '', n = 0; n < e; n++) {\n          t += Math.floor(36 * Math.random()).toString(36);\n        }\n\n        return t;\n      }, r.bind = function (e, t) {\n        return function () {\n          e.apply(t, arguments);\n        };\n      }, r._convertData = function (e) {\n        for (var t in e) {\n          var n = t.split('-'),\n              i = e;\n\n          if (1 !== n.length) {\n            for (var r = 0; r < n.length; r++) {\n              var o = n[r];\n              (o = o.substring(0, 1).toLowerCase() + o.substring(1)) in i || (i[o] = {}), r == n.length - 1 && (i[o] = e[t]), i = i[o];\n            }\n\n            delete e[t];\n          }\n        }\n\n        return e;\n      }, r.hasScroll = function (e, t) {\n        var n = o(t),\n            i = t.style.overflowX,\n            r = t.style.overflowY;\n        return (i !== r || 'hidden' !== r && 'visible' !== r) && ('scroll' === i || 'scroll' === r || n.innerHeight() < t.scrollHeight || n.innerWidth() < t.scrollWidth);\n      }, r.escapeMarkup = function (e) {\n        var t = {\n          '\\\\': '&#92;',\n          '&': '&amp;',\n          '<': '&lt;',\n          '>': '&gt;',\n          '\"': '&quot;',\n          \"'\": '&#39;',\n          '/': '&#47;'\n        };\n        return 'string' != typeof e ? e : String(e).replace(/[&<>\"'\\/\\\\]/g, function (e) {\n          return t[e];\n        });\n      }, r.appendMany = function (e, t) {\n        if ('1.7' === o.fn.jquery.substr(0, 3)) {\n          var n = o();\n          o.map(t, function (e) {\n            n = n.add(e);\n          }), t = n;\n        }\n\n        e.append(t);\n      }, r.__cache = {};\n      var n = 0;\n      return r.GetUniqueElementId = function (e) {\n        var t = e.getAttribute('data-select2-id');\n        return null == t && (e.id ? (t = e.id, e.setAttribute('data-select2-id', t)) : (e.setAttribute('data-select2-id', ++n), t = n.toString())), t;\n      }, r.StoreData = function (e, t, n) {\n        var i = r.GetUniqueElementId(e);\n        r.__cache[i] || (r.__cache[i] = {}), r.__cache[i][t] = n;\n      }, r.GetData = function (e, t) {\n        var n = r.GetUniqueElementId(e);\n        return t ? r.__cache[n] && null != r.__cache[n][t] ? r.__cache[n][t] : o(e).data(t) : r.__cache[n];\n      }, r.RemoveData = function (e) {\n        var t = r.GetUniqueElementId(e);\n        null != r.__cache[t] && delete r.__cache[t], e.removeAttribute('data-select2-id');\n      }, r;\n    }), e.define('select2/results', ['jquery', './utils'], function (h, f) {\n      function i(e, t, n) {\n        this.$element = e, this.data = n, this.options = t, i.__super__.constructor.call(this);\n      }\n\n      return f.Extend(i, f.Observable), i.prototype.render = function () {\n        var e = h('<ul class=\"select2-results__options\" role=\"listbox\"></ul>');\n        return this.options.get('multiple') && e.attr('aria-multiselectable', 'true'), this.$results = e;\n      }, i.prototype.clear = function () {\n        this.$results.empty();\n      }, i.prototype.displayMessage = function (e) {\n        var t = this.options.get('escapeMarkup');\n        this.clear(), this.hideLoading();\n        var n = h('<li role=\"alert\" aria-live=\"assertive\" class=\"select2-results__option\"></li>'),\n            i = this.options.get('translations').get(e.message);\n        n.append(t(i(e.args))), n[0].className += ' select2-results__message', this.$results.append(n);\n      }, i.prototype.hideMessages = function () {\n        this.$results.find('.select2-results__message').remove();\n      }, i.prototype.append = function (e) {\n        this.hideLoading();\n        var t = [];\n\n        if (null != e.results && 0 !== e.results.length) {\n          e.results = this.sort(e.results);\n\n          for (var n = 0; n < e.results.length; n++) {\n            var i = e.results[n],\n                r = this.option(i);\n            t.push(r);\n          }\n\n          this.$results.append(t);\n        } else 0 === this.$results.children().length && this.trigger('results:message', {\n          message: 'noResults'\n        });\n      }, i.prototype.position = function (e, t) {\n        t.find('.select2-results').append(e);\n      }, i.prototype.sort = function (e) {\n        return this.options.get('sorter')(e);\n      }, i.prototype.highlightFirstItem = function () {\n        var e = this.$results.find('.select2-results__option[aria-selected]'),\n            t = e.filter('[aria-selected=true]');\n        0 < t.length ? t.first().trigger('mouseenter') : e.first().trigger('mouseenter'), this.ensureHighlightVisible();\n      }, i.prototype.setClasses = function () {\n        var t = this;\n        this.data.current(function (e) {\n          var i = h.map(e, function (e) {\n            return e.id.toString();\n          });\n          t.$results.find('.select2-results__option[aria-selected]').each(function () {\n            var e = h(this),\n                t = f.GetData(this, 'data'),\n                n = '' + t.id;\n            null != t.element && t.element.selected || null == t.element && -1 < h.inArray(n, i) ? e.attr('aria-selected', 'true') : e.attr('aria-selected', 'false');\n          });\n        });\n      }, i.prototype.showLoading = function (e) {\n        this.hideLoading();\n        var t = {\n          disabled: !0,\n          loading: !0,\n          text: this.options.get('translations').get('searching')(e)\n        },\n            n = this.option(t);\n        n.className += ' loading-results', this.$results.prepend(n);\n      }, i.prototype.hideLoading = function () {\n        this.$results.find('.loading-results').remove();\n      }, i.prototype.option = function (e) {\n        var t = document.createElement('li');\n        t.className = 'select2-results__option';\n        var n = {\n          role: 'option',\n          'aria-selected': 'false'\n        },\n            i = window.Element.prototype.matches || window.Element.prototype.msMatchesSelector || window.Element.prototype.webkitMatchesSelector;\n\n        for (var r in (null != e.element && i.call(e.element, ':disabled') || null == e.element && e.disabled) && (delete n['aria-selected'], n['aria-disabled'] = 'true'), null == e.id && delete n['aria-selected'], null != e._resultId && (t.id = e._resultId), e.title && (t.title = e.title), e.children && (n.role = 'group', n['aria-label'] = e.text, delete n['aria-selected']), n) {\n          var o = n[r];\n          t.setAttribute(r, o);\n        }\n\n        if (e.children) {\n          var s = h(t),\n              a = document.createElement('strong');\n          a.className = 'select2-results__group';\n          h(a);\n          this.template(e, a);\n\n          for (var l = [], c = 0; c < e.children.length; c++) {\n            var u = e.children[c],\n                d = this.option(u);\n            l.push(d);\n          }\n\n          var p = h('<ul></ul>', {\n            \"class\": 'select2-results__options select2-results__options--nested'\n          });\n          p.append(l), s.append(a), s.append(p);\n        } else this.template(e, t);\n\n        return f.StoreData(t, 'data', e), t;\n      }, i.prototype.bind = function (t, e) {\n        var l = this,\n            n = t.id + '-results';\n        this.$results.attr('id', n), t.on('results:all', function (e) {\n          l.clear(), l.append(e.data), t.isOpen() && (l.setClasses(), l.highlightFirstItem());\n        }), t.on('results:append', function (e) {\n          l.append(e.data), t.isOpen() && l.setClasses();\n        }), t.on('query', function (e) {\n          l.hideMessages(), l.showLoading(e);\n        }), t.on('select', function () {\n          t.isOpen() && (l.setClasses(), l.options.get('scrollAfterSelect') && l.highlightFirstItem());\n        }), t.on('unselect', function () {\n          t.isOpen() && (l.setClasses(), l.options.get('scrollAfterSelect') && l.highlightFirstItem());\n        }), t.on('open', function () {\n          l.$results.attr('aria-expanded', 'true'), l.$results.attr('aria-hidden', 'false'), l.setClasses(), l.ensureHighlightVisible();\n        }), t.on('close', function () {\n          l.$results.attr('aria-expanded', 'false'), l.$results.attr('aria-hidden', 'true'), l.$results.removeAttr('aria-activedescendant');\n        }), t.on('results:toggle', function () {\n          var e = l.getHighlightedResults();\n          0 !== e.length && e.trigger('mouseup');\n        }), t.on('results:select', function () {\n          var e = l.getHighlightedResults();\n\n          if (0 !== e.length) {\n            var t = f.GetData(e[0], 'data');\n            'true' == e.attr('aria-selected') ? l.trigger('close', {}) : l.trigger('select', {\n              data: t\n            });\n          }\n        }), t.on('results:previous', function () {\n          var e = l.getHighlightedResults(),\n              t = l.$results.find('[aria-selected]'),\n              n = t.index(e);\n\n          if (!(n <= 0)) {\n            var i = n - 1;\n            0 === e.length && (i = 0);\n            var r = t.eq(i);\n            r.trigger('mouseenter');\n            var o = l.$results.offset().top,\n                s = r.offset().top,\n                a = l.$results.scrollTop() + (s - o);\n            0 === i ? l.$results.scrollTop(0) : s - o < 0 && l.$results.scrollTop(a);\n          }\n        }), t.on('results:next', function () {\n          var e = l.getHighlightedResults(),\n              t = l.$results.find('[aria-selected]'),\n              n = t.index(e) + 1;\n\n          if (!(n >= t.length)) {\n            var i = t.eq(n);\n            i.trigger('mouseenter');\n            var r = l.$results.offset().top + l.$results.outerHeight(!1),\n                o = i.offset().top + i.outerHeight(!1),\n                s = l.$results.scrollTop() + o - r;\n            0 === n ? l.$results.scrollTop(0) : r < o && l.$results.scrollTop(s);\n          }\n        }), t.on('results:focus', function (e) {\n          e.element.addClass('select2-results__option--highlighted');\n        }), t.on('results:message', function (e) {\n          l.displayMessage(e);\n        }), h.fn.mousewheel && this.$results.on('mousewheel', function (e) {\n          var t = l.$results.scrollTop(),\n              n = l.$results.get(0).scrollHeight - t + e.deltaY,\n              i = 0 < e.deltaY && t - e.deltaY <= 0,\n              r = e.deltaY < 0 && n <= l.$results.height();\n          i ? (l.$results.scrollTop(0), e.preventDefault(), e.stopPropagation()) : r && (l.$results.scrollTop(l.$results.get(0).scrollHeight - l.$results.height()), e.preventDefault(), e.stopPropagation());\n        }), this.$results.on('mouseup', '.select2-results__option[aria-selected]', function (e) {\n          var t = h(this),\n              n = f.GetData(this, 'data');\n          'true' !== t.attr('aria-selected') ? l.trigger('select', {\n            originalEvent: e,\n            data: n\n          }) : l.options.get('multiple') ? l.trigger('unselect', {\n            originalEvent: e,\n            data: n\n          }) : l.trigger('close', {});\n        }), this.$results.on('mouseenter', '.select2-results__option[aria-selected]', function (e) {\n          var t = f.GetData(this, 'data');\n          l.getHighlightedResults().removeClass('select2-results__option--highlighted'), l.trigger('results:focus', {\n            data: t,\n            element: h(this)\n          });\n        });\n      }, i.prototype.getHighlightedResults = function () {\n        return this.$results.find('.select2-results__option--highlighted');\n      }, i.prototype.destroy = function () {\n        this.$results.remove();\n      }, i.prototype.ensureHighlightVisible = function () {\n        var e = this.getHighlightedResults();\n\n        if (0 !== e.length) {\n          var t = this.$results.find('[aria-selected]').index(e),\n              n = this.$results.offset().top,\n              i = e.offset().top,\n              r = this.$results.scrollTop() + (i - n),\n              o = i - n;\n          r -= 2 * e.outerHeight(!1), t <= 2 ? this.$results.scrollTop(0) : (o > this.$results.outerHeight() || o < 0) && this.$results.scrollTop(r);\n        }\n      }, i.prototype.template = function (e, t) {\n        var n = this.options.get('templateResult'),\n            i = this.options.get('escapeMarkup'),\n            r = n(e, t);\n        null == r ? t.style.display = 'none' : 'string' == typeof r ? t.innerHTML = i(r) : h(t).append(r);\n      }, i;\n    }), e.define('select2/keys', [], function () {\n      return {\n        BACKSPACE: 8,\n        TAB: 9,\n        ENTER: 13,\n        SHIFT: 16,\n        CTRL: 17,\n        ALT: 18,\n        ESC: 27,\n        SPACE: 32,\n        PAGE_UP: 33,\n        PAGE_DOWN: 34,\n        END: 35,\n        HOME: 36,\n        LEFT: 37,\n        UP: 38,\n        RIGHT: 39,\n        DOWN: 40,\n        DELETE: 46\n      };\n    }), e.define('select2/selection/base', ['jquery', '../utils', '../keys'], function (n, i, r) {\n      function o(e, t) {\n        this.$element = e, this.options = t, o.__super__.constructor.call(this);\n      }\n\n      return i.Extend(o, i.Observable), o.prototype.render = function () {\n        var e = n('<span class=\"select2-selection\" role=\"combobox\"  aria-haspopup=\"true\" aria-expanded=\"false\"></span>');\n        return this._tabindex = 0, null != i.GetData(this.$element[0], 'old-tabindex') ? this._tabindex = i.GetData(this.$element[0], 'old-tabindex') : null != this.$element.attr('tabindex') && (this._tabindex = this.$element.attr('tabindex')), e.attr('title', this.$element.attr('title')), e.attr('tabindex', this._tabindex), e.attr('aria-disabled', 'false'), this.$selection = e;\n      }, o.prototype.bind = function (e, t) {\n        var n = this,\n            i = e.id + '-results';\n        this.container = e, this.$selection.on('focus', function (e) {\n          n.trigger('focus', e);\n        }), this.$selection.on('blur', function (e) {\n          n._handleBlur(e);\n        }), this.$selection.on('keydown', function (e) {\n          n.trigger('keypress', e), e.which === r.SPACE && e.preventDefault();\n        }), e.on('results:focus', function (e) {\n          n.$selection.attr('aria-activedescendant', e.data._resultId);\n        }), e.on('selection:update', function (e) {\n          n.update(e.data);\n        }), e.on('open', function () {\n          n.$selection.attr('aria-expanded', 'true'), n.$selection.attr('aria-owns', i), n._attachCloseHandler(e);\n        }), e.on('close', function () {\n          n.$selection.attr('aria-expanded', 'false'), n.$selection.removeAttr('aria-activedescendant'), n.$selection.removeAttr('aria-owns'), n.$selection.trigger('focus'), n._detachCloseHandler(e);\n        }), e.on('enable', function () {\n          n.$selection.attr('tabindex', n._tabindex), n.$selection.attr('aria-disabled', 'false');\n        }), e.on('disable', function () {\n          n.$selection.attr('tabindex', '-1'), n.$selection.attr('aria-disabled', 'true');\n        });\n      }, o.prototype._handleBlur = function (e) {\n        var t = this;\n        window.setTimeout(function () {\n          document.activeElement == t.$selection[0] || n.contains(t.$selection[0], document.activeElement) || t.trigger('blur', e);\n        }, 1);\n      }, o.prototype._attachCloseHandler = function (e) {\n        n(document.body).on('mousedown.select2.' + e.id, function (e) {\n          var t = n(e.target).closest('.select2');\n          n('.select2.select2-container--open').each(function () {\n            this != t[0] && i.GetData(this, 'element').select2('close');\n          });\n        });\n      }, o.prototype._detachCloseHandler = function (e) {\n        n(document.body).off('mousedown.select2.' + e.id);\n      }, o.prototype.position = function (e, t) {\n        t.find('.selection').append(e);\n      }, o.prototype.destroy = function () {\n        this._detachCloseHandler(this.container);\n      }, o.prototype.update = function (e) {\n        throw new Error('The `update` method must be defined in child classes.');\n      }, o.prototype.isEnabled = function () {\n        return !this.isDisabled();\n      }, o.prototype.isDisabled = function () {\n        return this.options.get('disabled');\n      }, o;\n    }), e.define('select2/selection/single', ['jquery', './base', '../utils', '../keys'], function (e, t, n, i) {\n      function r() {\n        r.__super__.constructor.apply(this, arguments);\n      }\n\n      return n.Extend(r, t), r.prototype.render = function () {\n        var e = r.__super__.render.call(this);\n\n        return e.addClass('select2-selection--single'), e.html('<span class=\"select2-selection__rendered\"></span><span class=\"select2-selection__arrow\" role=\"presentation\"><b role=\"presentation\"></b></span>'), e;\n      }, r.prototype.bind = function (t, e) {\n        var n = this;\n\n        r.__super__.bind.apply(this, arguments);\n\n        var i = t.id + '-container';\n        this.$selection.find('.select2-selection__rendered').attr('id', i).attr('role', 'textbox').attr('aria-readonly', 'true'), this.$selection.attr('aria-labelledby', i), this.$selection.on('mousedown', function (e) {\n          1 === e.which && n.trigger('toggle', {\n            originalEvent: e\n          });\n        }), this.$selection.on('focus', function (e) {}), this.$selection.on('blur', function (e) {}), t.on('focus', function (e) {\n          t.isOpen() || n.$selection.trigger('focus');\n        });\n      }, r.prototype.clear = function () {\n        var e = this.$selection.find('.select2-selection__rendered');\n        e.empty(), e.removeAttr('title');\n      }, r.prototype.display = function (e, t) {\n        var n = this.options.get('templateSelection');\n        return this.options.get('escapeMarkup')(n(e, t));\n      }, r.prototype.selectionContainer = function () {\n        return e('<span></span>');\n      }, r.prototype.update = function (e) {\n        if (0 !== e.length) {\n          var t = e[0],\n              n = this.$selection.find('.select2-selection__rendered'),\n              i = this.display(t, n);\n          n.empty().append(i);\n          var r = t.title || t.text;\n          r ? n.attr('title', r) : n.removeAttr('title');\n        } else this.clear();\n      }, r;\n    }), e.define('select2/selection/multiple', ['jquery', './base', '../utils'], function (r, e, l) {\n      function n(e, t) {\n        n.__super__.constructor.apply(this, arguments);\n      }\n\n      return l.Extend(n, e), n.prototype.render = function () {\n        var e = n.__super__.render.call(this);\n\n        return e.addClass('select2-selection--multiple'), e.html('<ul class=\"select2-selection__rendered\"></ul>'), e;\n      }, n.prototype.bind = function (e, t) {\n        var i = this;\n        n.__super__.bind.apply(this, arguments), this.$selection.on('click', function (e) {\n          i.trigger('toggle', {\n            originalEvent: e\n          });\n        }), this.$selection.on('click', '.select2-selection__choice__remove', function (e) {\n          if (!i.isDisabled()) {\n            var t = r(this).parent(),\n                n = l.GetData(t[0], 'data');\n            i.trigger('unselect', {\n              originalEvent: e,\n              data: n\n            });\n          }\n        });\n      }, n.prototype.clear = function () {\n        var e = this.$selection.find('.select2-selection__rendered');\n        e.empty(), e.removeAttr('title');\n      }, n.prototype.display = function (e, t) {\n        var n = this.options.get('templateSelection');\n        return this.options.get('escapeMarkup')(n(e, t));\n      }, n.prototype.selectionContainer = function () {\n        return r('<li class=\"select2-selection__choice\"><span class=\"select2-selection__choice__remove\" role=\"presentation\">&times;</span></li>');\n      }, n.prototype.update = function (e) {\n        if (this.clear(), 0 !== e.length) {\n          for (var t = [], n = 0; n < e.length; n++) {\n            var i = e[n],\n                r = this.selectionContainer(),\n                o = this.display(i, r);\n            r.append(o);\n            var s = i.title || i.text;\n            s && r.attr('title', s), l.StoreData(r[0], 'data', i), t.push(r);\n          }\n\n          var a = this.$selection.find('.select2-selection__rendered');\n          l.appendMany(a, t);\n        }\n      }, n;\n    }), e.define('select2/selection/placeholder', ['../utils'], function (e) {\n      function t(e, t, n) {\n        this.placeholder = this.normalizePlaceholder(n.get('placeholder')), e.call(this, t, n);\n      }\n\n      return t.prototype.normalizePlaceholder = function (e, t) {\n        return 'string' == typeof t && (t = {\n          id: '',\n          text: t\n        }), t;\n      }, t.prototype.createPlaceholder = function (e, t) {\n        var n = this.selectionContainer();\n        return n.html(this.display(t)), n.addClass('select2-selection__placeholder').removeClass('select2-selection__choice'), n;\n      }, t.prototype.update = function (e, t) {\n        var n = 1 == t.length && t[0].id != this.placeholder.id;\n        if (1 < t.length || n) return e.call(this, t);\n        this.clear();\n        var i = this.createPlaceholder(this.placeholder);\n        this.$selection.find('.select2-selection__rendered').append(i);\n      }, t;\n    }), e.define('select2/selection/allowClear', ['jquery', '../keys', '../utils'], function (r, i, a) {\n      function e() {}\n\n      return e.prototype.bind = function (e, t, n) {\n        var i = this;\n        e.call(this, t, n), null == this.placeholder && this.options.get('debug') && window.console && console.error && console.error('Select2: The `allowClear` option should be used in combination with the `placeholder` option.'), this.$selection.on('mousedown', '.select2-selection__clear', function (e) {\n          i._handleClear(e);\n        }), t.on('keypress', function (e) {\n          i._handleKeyboardClear(e, t);\n        });\n      }, e.prototype._handleClear = function (e, t) {\n        if (!this.isDisabled()) {\n          var n = this.$selection.find('.select2-selection__clear');\n\n          if (0 !== n.length) {\n            t.stopPropagation();\n            var i = a.GetData(n[0], 'data'),\n                r = this.$element.val();\n            this.$element.val(this.placeholder.id);\n            var o = {\n              data: i\n            };\n            if (this.trigger('clear', o), o.prevented) this.$element.val(r);else {\n              for (var s = 0; s < i.length; s++) {\n                if (o = {\n                  data: i[s]\n                }, this.trigger('unselect', o), o.prevented) return void this.$element.val(r);\n              }\n\n              this.$element.trigger('input').trigger('change'), this.trigger('toggle', {});\n            }\n          }\n        }\n      }, e.prototype._handleKeyboardClear = function (e, t, n) {\n        n.isOpen() || t.which != i.DELETE && t.which != i.BACKSPACE || this._handleClear(t);\n      }, e.prototype.update = function (e, t) {\n        if (e.call(this, t), !(0 < this.$selection.find('.select2-selection__placeholder').length || 0 === t.length)) {\n          var n = this.options.get('translations').get('removeAllItems'),\n              i = r('<span class=\"select2-selection__clear\" title=\"' + n() + '\">&times;</span>');\n          a.StoreData(i[0], 'data', t), this.$selection.find('.select2-selection__rendered').prepend(i);\n        }\n      }, e;\n    }), e.define('select2/selection/search', ['jquery', '../utils', '../keys'], function (i, a, l) {\n      function e(e, t, n) {\n        e.call(this, t, n);\n      }\n\n      return e.prototype.render = function (e) {\n        var t = i('<li class=\"select2-search select2-search--inline\"><input class=\"select2-search__field\" type=\"search\" tabindex=\"-1\" autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"none\" spellcheck=\"false\" role=\"searchbox\" aria-autocomplete=\"list\" /></li>');\n        this.$searchContainer = t, this.$search = t.find('input');\n        var n = e.call(this);\n        return this._transferTabIndex(), n;\n      }, e.prototype.bind = function (e, t, n) {\n        var i = this,\n            r = t.id + '-results';\n        e.call(this, t, n), t.on('open', function () {\n          i.$search.attr('aria-controls', r), i.$search.trigger('focus');\n        }), t.on('close', function () {\n          i.$search.val(''), i.$search.removeAttr('aria-controls'), i.$search.removeAttr('aria-activedescendant'), i.$search.trigger('focus');\n        }), t.on('enable', function () {\n          i.$search.prop('disabled', !1), i._transferTabIndex();\n        }), t.on('disable', function () {\n          i.$search.prop('disabled', !0);\n        }), t.on('focus', function (e) {\n          i.$search.trigger('focus');\n        }), t.on('results:focus', function (e) {\n          e.data._resultId ? i.$search.attr('aria-activedescendant', e.data._resultId) : i.$search.removeAttr('aria-activedescendant');\n        }), this.$selection.on('focusin', '.select2-search--inline', function (e) {\n          i.trigger('focus', e);\n        }), this.$selection.on('focusout', '.select2-search--inline', function (e) {\n          i._handleBlur(e);\n        }), this.$selection.on('keydown', '.select2-search--inline', function (e) {\n          if (e.stopPropagation(), i.trigger('keypress', e), i._keyUpPrevented = e.isDefaultPrevented(), e.which === l.BACKSPACE && '' === i.$search.val()) {\n            var t = i.$searchContainer.prev('.select2-selection__choice');\n\n            if (0 < t.length) {\n              var n = a.GetData(t[0], 'data');\n              i.searchRemoveChoice(n), e.preventDefault();\n            }\n          }\n        }), this.$selection.on('click', '.select2-search--inline', function (e) {\n          i.$search.val() && e.stopPropagation();\n        });\n        var o = document.documentMode,\n            s = o && o <= 11;\n        this.$selection.on('input.searchcheck', '.select2-search--inline', function (e) {\n          s ? i.$selection.off('input.search input.searchcheck') : i.$selection.off('keyup.search');\n        }), this.$selection.on('keyup.search input.search', '.select2-search--inline', function (e) {\n          if (s && 'input' === e.type) i.$selection.off('input.search input.searchcheck');else {\n            var t = e.which;\n            t != l.SHIFT && t != l.CTRL && t != l.ALT && t != l.TAB && i.handleSearch(e);\n          }\n        });\n      }, e.prototype._transferTabIndex = function (e) {\n        this.$search.attr('tabindex', this.$selection.attr('tabindex')), this.$selection.attr('tabindex', '-1');\n      }, e.prototype.createPlaceholder = function (e, t) {\n        this.$search.attr('placeholder', t.text);\n      }, e.prototype.update = function (e, t) {\n        var n = this.$search[0] == document.activeElement;\n        this.$search.attr('placeholder', ''), e.call(this, t), this.$selection.find('.select2-selection__rendered').append(this.$searchContainer), this.resizeSearch(), n && this.$search.trigger('focus');\n      }, e.prototype.handleSearch = function () {\n        if (this.resizeSearch(), !this._keyUpPrevented) {\n          var e = this.$search.val();\n          this.trigger('query', {\n            term: e\n          });\n        }\n\n        this._keyUpPrevented = !1;\n      }, e.prototype.searchRemoveChoice = function (e, t) {\n        this.trigger('unselect', {\n          data: t\n        }), this.$search.val(t.text), this.handleSearch();\n      }, e.prototype.resizeSearch = function () {\n        this.$search.css('width', '25px');\n        var e = '';\n        '' !== this.$search.attr('placeholder') ? e = this.$selection.find('.select2-selection__rendered').width() : e = 0.75 * (this.$search.val().length + 1) + 'em';\n        this.$search.css('width', e);\n      }, e;\n    }), e.define('select2/selection/eventRelay', ['jquery'], function (s) {\n      function e() {}\n\n      return e.prototype.bind = function (e, t, n) {\n        var i = this,\n            r = ['open', 'opening', 'close', 'closing', 'select', 'selecting', 'unselect', 'unselecting', 'clear', 'clearing'],\n            o = ['opening', 'closing', 'selecting', 'unselecting', 'clearing'];\n        e.call(this, t, n), t.on('*', function (e, t) {\n          if (-1 !== s.inArray(e, r)) {\n            t = t || {};\n            var n = s.Event('select2:' + e, {\n              params: t\n            });\n            i.$element.trigger(n), -1 !== s.inArray(e, o) && (t.prevented = n.isDefaultPrevented());\n          }\n        });\n      }, e;\n    }), e.define('select2/translation', ['jquery', 'require'], function (t, n) {\n      function i(e) {\n        this.dict = e || {};\n      }\n\n      return i.prototype.all = function () {\n        return this.dict;\n      }, i.prototype.get = function (e) {\n        return this.dict[e];\n      }, i.prototype.extend = function (e) {\n        this.dict = t.extend({}, e.all(), this.dict);\n      }, i._cache = {}, i.loadPath = function (e) {\n        if (!(e in i._cache)) {\n          var t = n(e);\n          i._cache[e] = t;\n        }\n\n        return new i(i._cache[e]);\n      }, i;\n    }), e.define('select2/diacritics', [], function () {\n      return {\n        'Ⓐ': 'A',\n        Ａ: 'A',\n        À: 'A',\n        Á: 'A',\n        Â: 'A',\n        Ầ: 'A',\n        Ấ: 'A',\n        Ẫ: 'A',\n        Ẩ: 'A',\n        Ã: 'A',\n        Ā: 'A',\n        Ă: 'A',\n        Ằ: 'A',\n        Ắ: 'A',\n        Ẵ: 'A',\n        Ẳ: 'A',\n        Ȧ: 'A',\n        Ǡ: 'A',\n        Ä: 'A',\n        Ǟ: 'A',\n        Ả: 'A',\n        Å: 'A',\n        Ǻ: 'A',\n        Ǎ: 'A',\n        Ȁ: 'A',\n        Ȃ: 'A',\n        Ạ: 'A',\n        Ậ: 'A',\n        Ặ: 'A',\n        Ḁ: 'A',\n        Ą: 'A',\n        Ⱥ: 'A',\n        Ɐ: 'A',\n        Ꜳ: 'AA',\n        Æ: 'AE',\n        Ǽ: 'AE',\n        Ǣ: 'AE',\n        Ꜵ: 'AO',\n        Ꜷ: 'AU',\n        Ꜹ: 'AV',\n        Ꜻ: 'AV',\n        Ꜽ: 'AY',\n        'Ⓑ': 'B',\n        Ｂ: 'B',\n        Ḃ: 'B',\n        Ḅ: 'B',\n        Ḇ: 'B',\n        Ƀ: 'B',\n        Ƃ: 'B',\n        Ɓ: 'B',\n        'Ⓒ': 'C',\n        Ｃ: 'C',\n        Ć: 'C',\n        Ĉ: 'C',\n        Ċ: 'C',\n        Č: 'C',\n        Ç: 'C',\n        Ḉ: 'C',\n        Ƈ: 'C',\n        Ȼ: 'C',\n        Ꜿ: 'C',\n        'Ⓓ': 'D',\n        Ｄ: 'D',\n        Ḋ: 'D',\n        Ď: 'D',\n        Ḍ: 'D',\n        Ḑ: 'D',\n        Ḓ: 'D',\n        Ḏ: 'D',\n        Đ: 'D',\n        Ƌ: 'D',\n        Ɗ: 'D',\n        Ɖ: 'D',\n        Ꝺ: 'D',\n        Ǳ: 'DZ',\n        Ǆ: 'DZ',\n        ǲ: 'Dz',\n        ǅ: 'Dz',\n        'Ⓔ': 'E',\n        Ｅ: 'E',\n        È: 'E',\n        É: 'E',\n        Ê: 'E',\n        Ề: 'E',\n        Ế: 'E',\n        Ễ: 'E',\n        Ể: 'E',\n        Ẽ: 'E',\n        Ē: 'E',\n        Ḕ: 'E',\n        Ḗ: 'E',\n        Ĕ: 'E',\n        Ė: 'E',\n        Ë: 'E',\n        Ẻ: 'E',\n        Ě: 'E',\n        Ȅ: 'E',\n        Ȇ: 'E',\n        Ẹ: 'E',\n        Ệ: 'E',\n        Ȩ: 'E',\n        Ḝ: 'E',\n        Ę: 'E',\n        Ḙ: 'E',\n        Ḛ: 'E',\n        Ɛ: 'E',\n        Ǝ: 'E',\n        'Ⓕ': 'F',\n        Ｆ: 'F',\n        Ḟ: 'F',\n        Ƒ: 'F',\n        Ꝼ: 'F',\n        'Ⓖ': 'G',\n        Ｇ: 'G',\n        Ǵ: 'G',\n        Ĝ: 'G',\n        Ḡ: 'G',\n        Ğ: 'G',\n        Ġ: 'G',\n        Ǧ: 'G',\n        Ģ: 'G',\n        Ǥ: 'G',\n        Ɠ: 'G',\n        Ꞡ: 'G',\n        Ᵹ: 'G',\n        Ꝿ: 'G',\n        'Ⓗ': 'H',\n        Ｈ: 'H',\n        Ĥ: 'H',\n        Ḣ: 'H',\n        Ḧ: 'H',\n        Ȟ: 'H',\n        Ḥ: 'H',\n        Ḩ: 'H',\n        Ḫ: 'H',\n        Ħ: 'H',\n        Ⱨ: 'H',\n        Ⱶ: 'H',\n        Ɥ: 'H',\n        'Ⓘ': 'I',\n        Ｉ: 'I',\n        Ì: 'I',\n        Í: 'I',\n        Î: 'I',\n        Ĩ: 'I',\n        Ī: 'I',\n        Ĭ: 'I',\n        İ: 'I',\n        Ï: 'I',\n        Ḯ: 'I',\n        Ỉ: 'I',\n        Ǐ: 'I',\n        Ȉ: 'I',\n        Ȋ: 'I',\n        Ị: 'I',\n        Į: 'I',\n        Ḭ: 'I',\n        Ɨ: 'I',\n        'Ⓙ': 'J',\n        Ｊ: 'J',\n        Ĵ: 'J',\n        Ɉ: 'J',\n        'Ⓚ': 'K',\n        Ｋ: 'K',\n        Ḱ: 'K',\n        Ǩ: 'K',\n        Ḳ: 'K',\n        Ķ: 'K',\n        Ḵ: 'K',\n        Ƙ: 'K',\n        Ⱪ: 'K',\n        Ꝁ: 'K',\n        Ꝃ: 'K',\n        Ꝅ: 'K',\n        Ꞣ: 'K',\n        'Ⓛ': 'L',\n        Ｌ: 'L',\n        Ŀ: 'L',\n        Ĺ: 'L',\n        Ľ: 'L',\n        Ḷ: 'L',\n        Ḹ: 'L',\n        Ļ: 'L',\n        Ḽ: 'L',\n        Ḻ: 'L',\n        Ł: 'L',\n        Ƚ: 'L',\n        Ɫ: 'L',\n        Ⱡ: 'L',\n        Ꝉ: 'L',\n        Ꝇ: 'L',\n        Ꞁ: 'L',\n        Ǉ: 'LJ',\n        ǈ: 'Lj',\n        'Ⓜ': 'M',\n        Ｍ: 'M',\n        Ḿ: 'M',\n        Ṁ: 'M',\n        Ṃ: 'M',\n        Ɱ: 'M',\n        Ɯ: 'M',\n        'Ⓝ': 'N',\n        Ｎ: 'N',\n        Ǹ: 'N',\n        Ń: 'N',\n        Ñ: 'N',\n        Ṅ: 'N',\n        Ň: 'N',\n        Ṇ: 'N',\n        Ņ: 'N',\n        Ṋ: 'N',\n        Ṉ: 'N',\n        Ƞ: 'N',\n        Ɲ: 'N',\n        Ꞑ: 'N',\n        Ꞥ: 'N',\n        Ǌ: 'NJ',\n        ǋ: 'Nj',\n        'Ⓞ': 'O',\n        Ｏ: 'O',\n        Ò: 'O',\n        Ó: 'O',\n        Ô: 'O',\n        Ồ: 'O',\n        Ố: 'O',\n        Ỗ: 'O',\n        Ổ: 'O',\n        Õ: 'O',\n        Ṍ: 'O',\n        Ȭ: 'O',\n        Ṏ: 'O',\n        Ō: 'O',\n        Ṑ: 'O',\n        Ṓ: 'O',\n        Ŏ: 'O',\n        Ȯ: 'O',\n        Ȱ: 'O',\n        Ö: 'O',\n        Ȫ: 'O',\n        Ỏ: 'O',\n        Ő: 'O',\n        Ǒ: 'O',\n        Ȍ: 'O',\n        Ȏ: 'O',\n        Ơ: 'O',\n        Ờ: 'O',\n        Ớ: 'O',\n        Ỡ: 'O',\n        Ở: 'O',\n        Ợ: 'O',\n        Ọ: 'O',\n        Ộ: 'O',\n        Ǫ: 'O',\n        Ǭ: 'O',\n        Ø: 'O',\n        Ǿ: 'O',\n        Ɔ: 'O',\n        Ɵ: 'O',\n        Ꝋ: 'O',\n        Ꝍ: 'O',\n        Œ: 'OE',\n        Ƣ: 'OI',\n        Ꝏ: 'OO',\n        Ȣ: 'OU',\n        'Ⓟ': 'P',\n        Ｐ: 'P',\n        Ṕ: 'P',\n        Ṗ: 'P',\n        Ƥ: 'P',\n        Ᵽ: 'P',\n        Ꝑ: 'P',\n        Ꝓ: 'P',\n        Ꝕ: 'P',\n        'Ⓠ': 'Q',\n        Ｑ: 'Q',\n        Ꝗ: 'Q',\n        Ꝙ: 'Q',\n        Ɋ: 'Q',\n        'Ⓡ': 'R',\n        Ｒ: 'R',\n        Ŕ: 'R',\n        Ṙ: 'R',\n        Ř: 'R',\n        Ȑ: 'R',\n        Ȓ: 'R',\n        Ṛ: 'R',\n        Ṝ: 'R',\n        Ŗ: 'R',\n        Ṟ: 'R',\n        Ɍ: 'R',\n        Ɽ: 'R',\n        Ꝛ: 'R',\n        Ꞧ: 'R',\n        Ꞃ: 'R',\n        'Ⓢ': 'S',\n        Ｓ: 'S',\n        ẞ: 'S',\n        Ś: 'S',\n        Ṥ: 'S',\n        Ŝ: 'S',\n        Ṡ: 'S',\n        Š: 'S',\n        Ṧ: 'S',\n        Ṣ: 'S',\n        Ṩ: 'S',\n        Ș: 'S',\n        Ş: 'S',\n        Ȿ: 'S',\n        Ꞩ: 'S',\n        Ꞅ: 'S',\n        'Ⓣ': 'T',\n        Ｔ: 'T',\n        Ṫ: 'T',\n        Ť: 'T',\n        Ṭ: 'T',\n        Ț: 'T',\n        Ţ: 'T',\n        Ṱ: 'T',\n        Ṯ: 'T',\n        Ŧ: 'T',\n        Ƭ: 'T',\n        Ʈ: 'T',\n        Ⱦ: 'T',\n        Ꞇ: 'T',\n        Ꜩ: 'TZ',\n        'Ⓤ': 'U',\n        Ｕ: 'U',\n        Ù: 'U',\n        Ú: 'U',\n        Û: 'U',\n        Ũ: 'U',\n        Ṹ: 'U',\n        Ū: 'U',\n        Ṻ: 'U',\n        Ŭ: 'U',\n        Ü: 'U',\n        Ǜ: 'U',\n        Ǘ: 'U',\n        Ǖ: 'U',\n        Ǚ: 'U',\n        Ủ: 'U',\n        Ů: 'U',\n        Ű: 'U',\n        Ǔ: 'U',\n        Ȕ: 'U',\n        Ȗ: 'U',\n        Ư: 'U',\n        Ừ: 'U',\n        Ứ: 'U',\n        Ữ: 'U',\n        Ử: 'U',\n        Ự: 'U',\n        Ụ: 'U',\n        Ṳ: 'U',\n        Ų: 'U',\n        Ṷ: 'U',\n        Ṵ: 'U',\n        Ʉ: 'U',\n        'Ⓥ': 'V',\n        Ｖ: 'V',\n        Ṽ: 'V',\n        Ṿ: 'V',\n        Ʋ: 'V',\n        Ꝟ: 'V',\n        Ʌ: 'V',\n        Ꝡ: 'VY',\n        'Ⓦ': 'W',\n        Ｗ: 'W',\n        Ẁ: 'W',\n        Ẃ: 'W',\n        Ŵ: 'W',\n        Ẇ: 'W',\n        Ẅ: 'W',\n        Ẉ: 'W',\n        Ⱳ: 'W',\n        'Ⓧ': 'X',\n        Ｘ: 'X',\n        Ẋ: 'X',\n        Ẍ: 'X',\n        'Ⓨ': 'Y',\n        Ｙ: 'Y',\n        Ỳ: 'Y',\n        Ý: 'Y',\n        Ŷ: 'Y',\n        Ỹ: 'Y',\n        Ȳ: 'Y',\n        Ẏ: 'Y',\n        Ÿ: 'Y',\n        Ỷ: 'Y',\n        Ỵ: 'Y',\n        Ƴ: 'Y',\n        Ɏ: 'Y',\n        Ỿ: 'Y',\n        'Ⓩ': 'Z',\n        Ｚ: 'Z',\n        Ź: 'Z',\n        Ẑ: 'Z',\n        Ż: 'Z',\n        Ž: 'Z',\n        Ẓ: 'Z',\n        Ẕ: 'Z',\n        Ƶ: 'Z',\n        Ȥ: 'Z',\n        Ɀ: 'Z',\n        Ⱬ: 'Z',\n        Ꝣ: 'Z',\n        'ⓐ': 'a',\n        ａ: 'a',\n        ẚ: 'a',\n        à: 'a',\n        á: 'a',\n        â: 'a',\n        ầ: 'a',\n        ấ: 'a',\n        ẫ: 'a',\n        ẩ: 'a',\n        ã: 'a',\n        ā: 'a',\n        ă: 'a',\n        ằ: 'a',\n        ắ: 'a',\n        ẵ: 'a',\n        ẳ: 'a',\n        ȧ: 'a',\n        ǡ: 'a',\n        ä: 'a',\n        ǟ: 'a',\n        ả: 'a',\n        å: 'a',\n        ǻ: 'a',\n        ǎ: 'a',\n        ȁ: 'a',\n        ȃ: 'a',\n        ạ: 'a',\n        ậ: 'a',\n        ặ: 'a',\n        ḁ: 'a',\n        ą: 'a',\n        ⱥ: 'a',\n        ɐ: 'a',\n        ꜳ: 'aa',\n        æ: 'ae',\n        ǽ: 'ae',\n        ǣ: 'ae',\n        ꜵ: 'ao',\n        ꜷ: 'au',\n        ꜹ: 'av',\n        ꜻ: 'av',\n        ꜽ: 'ay',\n        'ⓑ': 'b',\n        ｂ: 'b',\n        ḃ: 'b',\n        ḅ: 'b',\n        ḇ: 'b',\n        ƀ: 'b',\n        ƃ: 'b',\n        ɓ: 'b',\n        'ⓒ': 'c',\n        ｃ: 'c',\n        ć: 'c',\n        ĉ: 'c',\n        ċ: 'c',\n        č: 'c',\n        ç: 'c',\n        ḉ: 'c',\n        ƈ: 'c',\n        ȼ: 'c',\n        ꜿ: 'c',\n        ↄ: 'c',\n        'ⓓ': 'd',\n        ｄ: 'd',\n        ḋ: 'd',\n        ď: 'd',\n        ḍ: 'd',\n        ḑ: 'd',\n        ḓ: 'd',\n        ḏ: 'd',\n        đ: 'd',\n        ƌ: 'd',\n        ɖ: 'd',\n        ɗ: 'd',\n        ꝺ: 'd',\n        ǳ: 'dz',\n        ǆ: 'dz',\n        'ⓔ': 'e',\n        ｅ: 'e',\n        è: 'e',\n        é: 'e',\n        ê: 'e',\n        ề: 'e',\n        ế: 'e',\n        ễ: 'e',\n        ể: 'e',\n        ẽ: 'e',\n        ē: 'e',\n        ḕ: 'e',\n        ḗ: 'e',\n        ĕ: 'e',\n        ė: 'e',\n        ë: 'e',\n        ẻ: 'e',\n        ě: 'e',\n        ȅ: 'e',\n        ȇ: 'e',\n        ẹ: 'e',\n        ệ: 'e',\n        ȩ: 'e',\n        ḝ: 'e',\n        ę: 'e',\n        ḙ: 'e',\n        ḛ: 'e',\n        ɇ: 'e',\n        ɛ: 'e',\n        ǝ: 'e',\n        'ⓕ': 'f',\n        ｆ: 'f',\n        ḟ: 'f',\n        ƒ: 'f',\n        ꝼ: 'f',\n        'ⓖ': 'g',\n        ｇ: 'g',\n        ǵ: 'g',\n        ĝ: 'g',\n        ḡ: 'g',\n        ğ: 'g',\n        ġ: 'g',\n        ǧ: 'g',\n        ģ: 'g',\n        ǥ: 'g',\n        ɠ: 'g',\n        ꞡ: 'g',\n        ᵹ: 'g',\n        ꝿ: 'g',\n        'ⓗ': 'h',\n        ｈ: 'h',\n        ĥ: 'h',\n        ḣ: 'h',\n        ḧ: 'h',\n        ȟ: 'h',\n        ḥ: 'h',\n        ḩ: 'h',\n        ḫ: 'h',\n        ẖ: 'h',\n        ħ: 'h',\n        ⱨ: 'h',\n        ⱶ: 'h',\n        ɥ: 'h',\n        ƕ: 'hv',\n        'ⓘ': 'i',\n        ｉ: 'i',\n        ì: 'i',\n        í: 'i',\n        î: 'i',\n        ĩ: 'i',\n        ī: 'i',\n        ĭ: 'i',\n        ï: 'i',\n        ḯ: 'i',\n        ỉ: 'i',\n        ǐ: 'i',\n        ȉ: 'i',\n        ȋ: 'i',\n        ị: 'i',\n        į: 'i',\n        ḭ: 'i',\n        ɨ: 'i',\n        ı: 'i',\n        'ⓙ': 'j',\n        ｊ: 'j',\n        ĵ: 'j',\n        ǰ: 'j',\n        ɉ: 'j',\n        'ⓚ': 'k',\n        ｋ: 'k',\n        ḱ: 'k',\n        ǩ: 'k',\n        ḳ: 'k',\n        ķ: 'k',\n        ḵ: 'k',\n        ƙ: 'k',\n        ⱪ: 'k',\n        ꝁ: 'k',\n        ꝃ: 'k',\n        ꝅ: 'k',\n        ꞣ: 'k',\n        'ⓛ': 'l',\n        ｌ: 'l',\n        ŀ: 'l',\n        ĺ: 'l',\n        ľ: 'l',\n        ḷ: 'l',\n        ḹ: 'l',\n        ļ: 'l',\n        ḽ: 'l',\n        ḻ: 'l',\n        ſ: 'l',\n        ł: 'l',\n        ƚ: 'l',\n        ɫ: 'l',\n        ⱡ: 'l',\n        ꝉ: 'l',\n        ꞁ: 'l',\n        ꝇ: 'l',\n        ǉ: 'lj',\n        'ⓜ': 'm',\n        ｍ: 'm',\n        ḿ: 'm',\n        ṁ: 'm',\n        ṃ: 'm',\n        ɱ: 'm',\n        ɯ: 'm',\n        'ⓝ': 'n',\n        ｎ: 'n',\n        ǹ: 'n',\n        ń: 'n',\n        ñ: 'n',\n        ṅ: 'n',\n        ň: 'n',\n        ṇ: 'n',\n        ņ: 'n',\n        ṋ: 'n',\n        ṉ: 'n',\n        ƞ: 'n',\n        ɲ: 'n',\n        ŉ: 'n',\n        ꞑ: 'n',\n        ꞥ: 'n',\n        ǌ: 'nj',\n        'ⓞ': 'o',\n        ｏ: 'o',\n        ò: 'o',\n        ó: 'o',\n        ô: 'o',\n        ồ: 'o',\n        ố: 'o',\n        ỗ: 'o',\n        ổ: 'o',\n        õ: 'o',\n        ṍ: 'o',\n        ȭ: 'o',\n        ṏ: 'o',\n        ō: 'o',\n        ṑ: 'o',\n        ṓ: 'o',\n        ŏ: 'o',\n        ȯ: 'o',\n        ȱ: 'o',\n        ö: 'o',\n        ȫ: 'o',\n        ỏ: 'o',\n        ő: 'o',\n        ǒ: 'o',\n        ȍ: 'o',\n        ȏ: 'o',\n        ơ: 'o',\n        ờ: 'o',\n        ớ: 'o',\n        ỡ: 'o',\n        ở: 'o',\n        ợ: 'o',\n        ọ: 'o',\n        ộ: 'o',\n        ǫ: 'o',\n        ǭ: 'o',\n        ø: 'o',\n        ǿ: 'o',\n        ɔ: 'o',\n        ꝋ: 'o',\n        ꝍ: 'o',\n        ɵ: 'o',\n        œ: 'oe',\n        ƣ: 'oi',\n        ȣ: 'ou',\n        ꝏ: 'oo',\n        'ⓟ': 'p',\n        ｐ: 'p',\n        ṕ: 'p',\n        ṗ: 'p',\n        ƥ: 'p',\n        ᵽ: 'p',\n        ꝑ: 'p',\n        ꝓ: 'p',\n        ꝕ: 'p',\n        'ⓠ': 'q',\n        ｑ: 'q',\n        ɋ: 'q',\n        ꝗ: 'q',\n        ꝙ: 'q',\n        'ⓡ': 'r',\n        ｒ: 'r',\n        ŕ: 'r',\n        ṙ: 'r',\n        ř: 'r',\n        ȑ: 'r',\n        ȓ: 'r',\n        ṛ: 'r',\n        ṝ: 'r',\n        ŗ: 'r',\n        ṟ: 'r',\n        ɍ: 'r',\n        ɽ: 'r',\n        ꝛ: 'r',\n        ꞧ: 'r',\n        ꞃ: 'r',\n        'ⓢ': 's',\n        ｓ: 's',\n        ß: 's',\n        ś: 's',\n        ṥ: 's',\n        ŝ: 's',\n        ṡ: 's',\n        š: 's',\n        ṧ: 's',\n        ṣ: 's',\n        ṩ: 's',\n        ș: 's',\n        ş: 's',\n        ȿ: 's',\n        ꞩ: 's',\n        ꞅ: 's',\n        ẛ: 's',\n        'ⓣ': 't',\n        ｔ: 't',\n        ṫ: 't',\n        ẗ: 't',\n        ť: 't',\n        ṭ: 't',\n        ț: 't',\n        ţ: 't',\n        ṱ: 't',\n        ṯ: 't',\n        ŧ: 't',\n        ƭ: 't',\n        ʈ: 't',\n        ⱦ: 't',\n        ꞇ: 't',\n        ꜩ: 'tz',\n        'ⓤ': 'u',\n        ｕ: 'u',\n        ù: 'u',\n        ú: 'u',\n        û: 'u',\n        ũ: 'u',\n        ṹ: 'u',\n        ū: 'u',\n        ṻ: 'u',\n        ŭ: 'u',\n        ü: 'u',\n        ǜ: 'u',\n        ǘ: 'u',\n        ǖ: 'u',\n        ǚ: 'u',\n        ủ: 'u',\n        ů: 'u',\n        ű: 'u',\n        ǔ: 'u',\n        ȕ: 'u',\n        ȗ: 'u',\n        ư: 'u',\n        ừ: 'u',\n        ứ: 'u',\n        ữ: 'u',\n        ử: 'u',\n        ự: 'u',\n        ụ: 'u',\n        ṳ: 'u',\n        ų: 'u',\n        ṷ: 'u',\n        ṵ: 'u',\n        ʉ: 'u',\n        'ⓥ': 'v',\n        ｖ: 'v',\n        ṽ: 'v',\n        ṿ: 'v',\n        ʋ: 'v',\n        ꝟ: 'v',\n        ʌ: 'v',\n        ꝡ: 'vy',\n        'ⓦ': 'w',\n        ｗ: 'w',\n        ẁ: 'w',\n        ẃ: 'w',\n        ŵ: 'w',\n        ẇ: 'w',\n        ẅ: 'w',\n        ẘ: 'w',\n        ẉ: 'w',\n        ⱳ: 'w',\n        'ⓧ': 'x',\n        ｘ: 'x',\n        ẋ: 'x',\n        ẍ: 'x',\n        'ⓨ': 'y',\n        ｙ: 'y',\n        ỳ: 'y',\n        ý: 'y',\n        ŷ: 'y',\n        ỹ: 'y',\n        ȳ: 'y',\n        ẏ: 'y',\n        ÿ: 'y',\n        ỷ: 'y',\n        ẙ: 'y',\n        ỵ: 'y',\n        ƴ: 'y',\n        ɏ: 'y',\n        ỿ: 'y',\n        'ⓩ': 'z',\n        ｚ: 'z',\n        ź: 'z',\n        ẑ: 'z',\n        ż: 'z',\n        ž: 'z',\n        ẓ: 'z',\n        ẕ: 'z',\n        ƶ: 'z',\n        ȥ: 'z',\n        ɀ: 'z',\n        ⱬ: 'z',\n        ꝣ: 'z',\n        Ά: 'Α',\n        Έ: 'Ε',\n        Ή: 'Η',\n        Ί: 'Ι',\n        Ϊ: 'Ι',\n        Ό: 'Ο',\n        Ύ: 'Υ',\n        Ϋ: 'Υ',\n        Ώ: 'Ω',\n        ά: 'α',\n        έ: 'ε',\n        ή: 'η',\n        ί: 'ι',\n        ϊ: 'ι',\n        ΐ: 'ι',\n        ό: 'ο',\n        ύ: 'υ',\n        ϋ: 'υ',\n        ΰ: 'υ',\n        ώ: 'ω',\n        ς: 'σ',\n        '’': \"'\"\n      };\n    }), e.define('select2/data/base', ['../utils'], function (i) {\n      function n(e, t) {\n        n.__super__.constructor.call(this);\n      }\n\n      return i.Extend(n, i.Observable), n.prototype.current = function (e) {\n        throw new Error('The `current` method must be defined in child classes.');\n      }, n.prototype.query = function (e, t) {\n        throw new Error('The `query` method must be defined in child classes.');\n      }, n.prototype.bind = function (e, t) {}, n.prototype.destroy = function () {}, n.prototype.generateResultId = function (e, t) {\n        var n = e.id + '-result-';\n        return n += i.generateChars(4), null != t.id ? n += '-' + t.id.toString() : n += '-' + i.generateChars(4), n;\n      }, n;\n    }), e.define('select2/data/select', ['./base', '../utils', 'jquery'], function (e, a, l) {\n      function n(e, t) {\n        this.$element = e, this.options = t, n.__super__.constructor.call(this);\n      }\n\n      return a.Extend(n, e), n.prototype.current = function (e) {\n        var n = [],\n            i = this;\n        this.$element.find(':selected').each(function () {\n          var e = l(this),\n              t = i.item(e);\n          n.push(t);\n        }), e(n);\n      }, n.prototype.select = function (r) {\n        var o = this;\n        if (r.selected = !0, l(r.element).is('option')) return r.element.selected = !0, void this.$element.trigger('input').trigger('change');\n        if (this.$element.prop('multiple')) this.current(function (e) {\n          var t = [];\n          (r = [r]).push.apply(r, e);\n\n          for (var n = 0; n < r.length; n++) {\n            var i = r[n].id;\n            -1 === l.inArray(i, t) && t.push(i);\n          }\n\n          o.$element.val(t), o.$element.trigger('input').trigger('change');\n        });else {\n          var e = r.id;\n          this.$element.val(e), this.$element.trigger('input').trigger('change');\n        }\n      }, n.prototype.unselect = function (r) {\n        var o = this;\n\n        if (this.$element.prop('multiple')) {\n          if (r.selected = !1, l(r.element).is('option')) return r.element.selected = !1, void this.$element.trigger('input').trigger('change');\n          this.current(function (e) {\n            for (var t = [], n = 0; n < e.length; n++) {\n              var i = e[n].id;\n              i !== r.id && -1 === l.inArray(i, t) && t.push(i);\n            }\n\n            o.$element.val(t), o.$element.trigger('input').trigger('change');\n          });\n        }\n      }, n.prototype.bind = function (e, t) {\n        var n = this;\n        (this.container = e).on('select', function (e) {\n          n.select(e.data);\n        }), e.on('unselect', function (e) {\n          n.unselect(e.data);\n        });\n      }, n.prototype.destroy = function () {\n        this.$element.find('*').each(function () {\n          a.RemoveData(this);\n        });\n      }, n.prototype.query = function (i, e) {\n        var r = [],\n            o = this;\n        this.$element.children().each(function () {\n          var e = l(this);\n\n          if (e.is('option') || e.is('optgroup')) {\n            var t = o.item(e),\n                n = o.matches(i, t);\n            null !== n && r.push(n);\n          }\n        }), e({\n          results: r\n        });\n      }, n.prototype.addOptions = function (e) {\n        a.appendMany(this.$element, e);\n      }, n.prototype.option = function (e) {\n        var t;\n        e.children ? (t = document.createElement('optgroup')).label = e.text : void 0 !== (t = document.createElement('option')).textContent ? t.textContent = e.text : t.innerText = e.text, void 0 !== e.id && (t.value = e.id), e.disabled && (t.disabled = !0), e.selected && (t.selected = !0), e.title && (t.title = e.title);\n\n        var n = l(t),\n            i = this._normalizeItem(e);\n\n        return i.element = t, a.StoreData(t, 'data', i), n;\n      }, n.prototype.item = function (e) {\n        var t = {};\n        if (null != (t = a.GetData(e[0], 'data'))) return t;\n        if (e.is('option')) t = {\n          id: e.val(),\n          text: e.text(),\n          disabled: e.prop('disabled'),\n          selected: e.prop('selected'),\n          title: e.prop('title')\n        };else if (e.is('optgroup')) {\n          t = {\n            text: e.prop('label'),\n            children: [],\n            title: e.prop('title')\n          };\n\n          for (var n = e.children('option'), i = [], r = 0; r < n.length; r++) {\n            var o = l(n[r]),\n                s = this.item(o);\n            i.push(s);\n          }\n\n          t.children = i;\n        }\n        return (t = this._normalizeItem(t)).element = e[0], a.StoreData(e[0], 'data', t), t;\n      }, n.prototype._normalizeItem = function (e) {\n        e !== Object(e) && (e = {\n          id: e,\n          text: e\n        });\n        return null != (e = l.extend({}, {\n          text: ''\n        }, e)).id && (e.id = e.id.toString()), null != e.text && (e.text = e.text.toString()), null == e._resultId && e.id && null != this.container && (e._resultId = this.generateResultId(this.container, e)), l.extend({}, {\n          selected: !1,\n          disabled: !1\n        }, e);\n      }, n.prototype.matches = function (e, t) {\n        return this.options.get('matcher')(e, t);\n      }, n;\n    }), e.define('select2/data/array', ['./select', '../utils', 'jquery'], function (e, f, g) {\n      function i(e, t) {\n        this._dataToConvert = t.get('data') || [], i.__super__.constructor.call(this, e, t);\n      }\n\n      return f.Extend(i, e), i.prototype.bind = function (e, t) {\n        i.__super__.bind.call(this, e, t), this.addOptions(this.convertToOptions(this._dataToConvert));\n      }, i.prototype.select = function (n) {\n        var e = this.$element.find('option').filter(function (e, t) {\n          return t.value == n.id.toString();\n        });\n        0 === e.length && (e = this.option(n), this.addOptions(e)), i.__super__.select.call(this, n);\n      }, i.prototype.convertToOptions = function (e) {\n        var t = this,\n            n = this.$element.find('option'),\n            i = n.map(function () {\n          return t.item(g(this)).id;\n        }).get(),\n            r = [];\n\n        function o(e) {\n          return function () {\n            return g(this).val() == e.id;\n          };\n        }\n\n        for (var s = 0; s < e.length; s++) {\n          var a = this._normalizeItem(e[s]);\n\n          if (0 <= g.inArray(a.id, i)) {\n            var l = n.filter(o(a)),\n                c = this.item(l),\n                u = g.extend(!0, {}, a, c),\n                d = this.option(u);\n            l.replaceWith(d);\n          } else {\n            var p = this.option(a);\n\n            if (a.children) {\n              var h = this.convertToOptions(a.children);\n              f.appendMany(p, h);\n            }\n\n            r.push(p);\n          }\n        }\n\n        return r;\n      }, i;\n    }), e.define('select2/data/ajax', ['./array', '../utils', 'jquery'], function (e, t, o) {\n      function n(e, t) {\n        this.ajaxOptions = this._applyDefaults(t.get('ajax')), null != this.ajaxOptions.processResults && (this.processResults = this.ajaxOptions.processResults), n.__super__.constructor.call(this, e, t);\n      }\n\n      return t.Extend(n, e), n.prototype._applyDefaults = function (e) {\n        var t = {\n          data: function data(e) {\n            return o.extend({}, e, {\n              q: e.term\n            });\n          },\n          transport: function transport(e, t, n) {\n            var i = o.ajax(e);\n            return i.then(t), i.fail(n), i;\n          }\n        };\n        return o.extend({}, t, e, !0);\n      }, n.prototype.processResults = function (e) {\n        return e;\n      }, n.prototype.query = function (n, i) {\n        var r = this;\n        null != this._request && (o.isFunction(this._request.abort) && this._request.abort(), this._request = null);\n        var t = o.extend({\n          type: 'GET'\n        }, this.ajaxOptions);\n\n        function e() {\n          var e = t.transport(t, function (e) {\n            var t = r.processResults(e, n);\n            r.options.get('debug') && window.console && console.error && (t && t.results && o.isArray(t.results) || console.error('Select2: The AJAX results did not return an array in the `results` key of the response.')), i(t);\n          }, function () {\n            'status' in e && (0 === e.status || '0' === e.status) || r.trigger('results:message', {\n              message: 'errorLoading'\n            });\n          });\n          r._request = e;\n        }\n\n        'function' == typeof t.url && (t.url = t.url.call(this.$element, n)), 'function' == typeof t.data && (t.data = t.data.call(this.$element, n)), this.ajaxOptions.delay && null != n.term ? (this._queryTimeout && window.clearTimeout(this._queryTimeout), this._queryTimeout = window.setTimeout(e, this.ajaxOptions.delay)) : e();\n      }, n;\n    }), e.define('select2/data/tags', ['jquery'], function (u) {\n      function e(e, t, n) {\n        var i = n.get('tags'),\n            r = n.get('createTag');\n        void 0 !== r && (this.createTag = r);\n        var o = n.get('insertTag');\n        if (void 0 !== o && (this.insertTag = o), e.call(this, t, n), u.isArray(i)) for (var s = 0; s < i.length; s++) {\n          var a = i[s],\n              l = this._normalizeItem(a),\n              c = this.option(l);\n\n          this.$element.append(c);\n        }\n      }\n\n      return e.prototype.query = function (e, c, u) {\n        var d = this;\n        this._removeOldTags(), null != c.term && null == c.page ? e.call(this, c, function e(t, n) {\n          for (var i = t.results, r = 0; r < i.length; r++) {\n            var o = i[r],\n                s = null != o.children && !e({\n              results: o.children\n            }, !0);\n            if ((o.text || '').toUpperCase() === (c.term || '').toUpperCase() || s) return !n && (t.data = i, void u(t));\n          }\n\n          if (n) return !0;\n          var a = d.createTag(c);\n\n          if (null != a) {\n            var l = d.option(a);\n            l.attr('data-select2-tag', !0), d.addOptions([l]), d.insertTag(i, a);\n          }\n\n          t.results = i, u(t);\n        }) : e.call(this, c, u);\n      }, e.prototype.createTag = function (e, t) {\n        var n = u.trim(t.term);\n        return '' === n ? null : {\n          id: n,\n          text: n\n        };\n      }, e.prototype.insertTag = function (e, t, n) {\n        t.unshift(n);\n      }, e.prototype._removeOldTags = function (e) {\n        this.$element.find('option[data-select2-tag]').each(function () {\n          this.selected || u(this).remove();\n        });\n      }, e;\n    }), e.define('select2/data/tokenizer', ['jquery'], function (d) {\n      function e(e, t, n) {\n        var i = n.get('tokenizer');\n        void 0 !== i && (this.tokenizer = i), e.call(this, t, n);\n      }\n\n      return e.prototype.bind = function (e, t, n) {\n        e.call(this, t, n), this.$search = t.dropdown.$search || t.selection.$search || n.find('.select2-search__field');\n      }, e.prototype.query = function (e, t, n) {\n        var i = this;\n        t.term = t.term || '';\n        var r = this.tokenizer(t, this.options, function (e) {\n          var t = i._normalizeItem(e);\n\n          if (!i.$element.find('option').filter(function () {\n            return d(this).val() === t.id;\n          }).length) {\n            var n = i.option(t);\n            n.attr('data-select2-tag', !0), i._removeOldTags(), i.addOptions([n]);\n          }\n\n          !function (e) {\n            i.trigger('select', {\n              data: e\n            });\n          }(t);\n        });\n        r.term !== t.term && (this.$search.length && (this.$search.val(r.term), this.$search.trigger('focus')), t.term = r.term), e.call(this, t, n);\n      }, e.prototype.tokenizer = function (e, t, n, i) {\n        for (var r = n.get('tokenSeparators') || [], o = t.term, s = 0, a = this.createTag || function (e) {\n          return {\n            id: e.term,\n            text: e.term\n          };\n        }; s < o.length;) {\n          var l = o[s];\n\n          if (-1 !== d.inArray(l, r)) {\n            var c = o.substr(0, s),\n                u = a(d.extend({}, t, {\n              term: c\n            }));\n            null != u ? (i(u), o = o.substr(s + 1) || '', s = 0) : s++;\n          } else s++;\n        }\n\n        return {\n          term: o\n        };\n      }, e;\n    }), e.define('select2/data/minimumInputLength', [], function () {\n      function e(e, t, n) {\n        this.minimumInputLength = n.get('minimumInputLength'), e.call(this, t, n);\n      }\n\n      return e.prototype.query = function (e, t, n) {\n        t.term = t.term || '', t.term.length < this.minimumInputLength ? this.trigger('results:message', {\n          message: 'inputTooShort',\n          args: {\n            minimum: this.minimumInputLength,\n            input: t.term,\n            params: t\n          }\n        }) : e.call(this, t, n);\n      }, e;\n    }), e.define('select2/data/maximumInputLength', [], function () {\n      function e(e, t, n) {\n        this.maximumInputLength = n.get('maximumInputLength'), e.call(this, t, n);\n      }\n\n      return e.prototype.query = function (e, t, n) {\n        t.term = t.term || '', 0 < this.maximumInputLength && t.term.length > this.maximumInputLength ? this.trigger('results:message', {\n          message: 'inputTooLong',\n          args: {\n            maximum: this.maximumInputLength,\n            input: t.term,\n            params: t\n          }\n        }) : e.call(this, t, n);\n      }, e;\n    }), e.define('select2/data/maximumSelectionLength', [], function () {\n      function e(e, t, n) {\n        this.maximumSelectionLength = n.get('maximumSelectionLength'), e.call(this, t, n);\n      }\n\n      return e.prototype.bind = function (e, t, n) {\n        var i = this;\n        e.call(this, t, n), t.on('select', function () {\n          i._checkIfMaximumSelected();\n        });\n      }, e.prototype.query = function (e, t, n) {\n        var i = this;\n\n        this._checkIfMaximumSelected(function () {\n          e.call(i, t, n);\n        });\n      }, e.prototype._checkIfMaximumSelected = function (e, n) {\n        var i = this;\n        this.current(function (e) {\n          var t = null != e ? e.length : 0;\n          0 < i.maximumSelectionLength && t >= i.maximumSelectionLength ? i.trigger('results:message', {\n            message: 'maximumSelected',\n            args: {\n              maximum: i.maximumSelectionLength\n            }\n          }) : n && n();\n        });\n      }, e;\n    }), e.define('select2/dropdown', ['jquery', './utils'], function (t, e) {\n      function n(e, t) {\n        this.$element = e, this.options = t, n.__super__.constructor.call(this);\n      }\n\n      return e.Extend(n, e.Observable), n.prototype.render = function () {\n        var e = t('<span class=\"select2-dropdown\"><span class=\"select2-results\"></span></span>');\n        return e.attr('dir', this.options.get('dir')), this.$dropdown = e;\n      }, n.prototype.bind = function () {}, n.prototype.position = function (e, t) {}, n.prototype.destroy = function () {\n        this.$dropdown.remove();\n      }, n;\n    }), e.define('select2/dropdown/search', ['jquery', '../utils'], function (o, e) {\n      function t() {}\n\n      return t.prototype.render = function (e) {\n        var t = e.call(this),\n            n = o('<span class=\"select2-search select2-search--dropdown\"><input class=\"select2-search__field\" type=\"search\" tabindex=\"-1\" autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"none\" spellcheck=\"false\" role=\"searchbox\" aria-autocomplete=\"list\" /></span>');\n        return this.$searchContainer = n, this.$search = n.find('input'), t.prepend(n), t;\n      }, t.prototype.bind = function (e, t, n) {\n        var i = this,\n            r = t.id + '-results';\n        e.call(this, t, n), this.$search.on('keydown', function (e) {\n          i.trigger('keypress', e), i._keyUpPrevented = e.isDefaultPrevented();\n        }), this.$search.on('input', function (e) {\n          o(this).off('keyup');\n        }), this.$search.on('keyup input', function (e) {\n          i.handleSearch(e);\n        }), t.on('open', function () {\n          i.$search.attr('tabindex', 0), i.$search.attr('aria-controls', r), i.$search.trigger('focus'), window.setTimeout(function () {\n            i.$search.trigger('focus');\n          }, 0);\n        }), t.on('close', function () {\n          i.$search.attr('tabindex', -1), i.$search.removeAttr('aria-controls'), i.$search.removeAttr('aria-activedescendant'), i.$search.val(''), i.$search.trigger('blur');\n        }), t.on('focus', function () {\n          t.isOpen() || i.$search.trigger('focus');\n        }), t.on('results:all', function (e) {\n          null != e.query.term && '' !== e.query.term || (i.showSearch(e) ? i.$searchContainer.removeClass('select2-search--hide') : i.$searchContainer.addClass('select2-search--hide'));\n        }), t.on('results:focus', function (e) {\n          e.data._resultId ? i.$search.attr('aria-activedescendant', e.data._resultId) : i.$search.removeAttr('aria-activedescendant');\n        });\n      }, t.prototype.handleSearch = function (e) {\n        if (!this._keyUpPrevented) {\n          var t = this.$search.val();\n          this.trigger('query', {\n            term: t\n          });\n        }\n\n        this._keyUpPrevented = !1;\n      }, t.prototype.showSearch = function (e, t) {\n        return !0;\n      }, t;\n    }), e.define('select2/dropdown/hidePlaceholder', [], function () {\n      function e(e, t, n, i) {\n        this.placeholder = this.normalizePlaceholder(n.get('placeholder')), e.call(this, t, n, i);\n      }\n\n      return e.prototype.append = function (e, t) {\n        t.results = this.removePlaceholder(t.results), e.call(this, t);\n      }, e.prototype.normalizePlaceholder = function (e, t) {\n        return 'string' == typeof t && (t = {\n          id: '',\n          text: t\n        }), t;\n      }, e.prototype.removePlaceholder = function (e, t) {\n        for (var n = t.slice(0), i = t.length - 1; 0 <= i; i--) {\n          var r = t[i];\n          this.placeholder.id === r.id && n.splice(i, 1);\n        }\n\n        return n;\n      }, e;\n    }), e.define('select2/dropdown/infiniteScroll', ['jquery'], function (n) {\n      function e(e, t, n, i) {\n        this.lastParams = {}, e.call(this, t, n, i), this.$loadingMore = this.createLoadingMore(), this.loading = !1;\n      }\n\n      return e.prototype.append = function (e, t) {\n        this.$loadingMore.remove(), this.loading = !1, e.call(this, t), this.showLoadingMore(t) && (this.$results.append(this.$loadingMore), this.loadMoreIfNeeded());\n      }, e.prototype.bind = function (e, t, n) {\n        var i = this;\n        e.call(this, t, n), t.on('query', function (e) {\n          i.lastParams = e, i.loading = !0;\n        }), t.on('query:append', function (e) {\n          i.lastParams = e, i.loading = !0;\n        }), this.$results.on('scroll', this.loadMoreIfNeeded.bind(this));\n      }, e.prototype.loadMoreIfNeeded = function () {\n        var e = n.contains(document.documentElement, this.$loadingMore[0]);\n\n        if (!this.loading && e) {\n          var t = this.$results.offset().top + this.$results.outerHeight(!1);\n          this.$loadingMore.offset().top + this.$loadingMore.outerHeight(!1) <= t + 50 && this.loadMore();\n        }\n      }, e.prototype.loadMore = function () {\n        this.loading = !0;\n        var e = n.extend({}, {\n          page: 1\n        }, this.lastParams);\n        e.page++, this.trigger('query:append', e);\n      }, e.prototype.showLoadingMore = function (e, t) {\n        return t.pagination && t.pagination.more;\n      }, e.prototype.createLoadingMore = function () {\n        var e = n('<li class=\"select2-results__option select2-results__option--load-more\"role=\"option\" aria-disabled=\"true\"></li>'),\n            t = this.options.get('translations').get('loadingMore');\n        return e.html(t(this.lastParams)), e;\n      }, e;\n    }), e.define('select2/dropdown/attachBody', ['jquery', '../utils'], function (f, a) {\n      function e(e, t, n) {\n        this.$dropdownParent = f(n.get('dropdownParent') || document.body), e.call(this, t, n);\n      }\n\n      return e.prototype.bind = function (e, t, n) {\n        var i = this;\n        e.call(this, t, n), t.on('open', function () {\n          i._showDropdown(), i._attachPositioningHandler(t), i._bindContainerResultHandlers(t);\n        }), t.on('close', function () {\n          i._hideDropdown(), i._detachPositioningHandler(t);\n        }), this.$dropdownContainer.on('mousedown', function (e) {\n          e.stopPropagation();\n        });\n      }, e.prototype.destroy = function (e) {\n        e.call(this), this.$dropdownContainer.remove();\n      }, e.prototype.position = function (e, t, n) {\n        t.attr('class', n.attr('class')), t.removeClass('select2'), t.addClass('select2-container--open'), t.css({\n          position: 'absolute',\n          top: -999999\n        }), this.$container = n;\n      }, e.prototype.render = function (e) {\n        var t = f('<span></span>'),\n            n = e.call(this);\n        return t.append(n), this.$dropdownContainer = t;\n      }, e.prototype._hideDropdown = function (e) {\n        this.$dropdownContainer.detach();\n      }, e.prototype._bindContainerResultHandlers = function (e, t) {\n        if (!this._containerResultsHandlersBound) {\n          var n = this;\n          t.on('results:all', function () {\n            n._positionDropdown(), n._resizeDropdown();\n          }), t.on('results:append', function () {\n            n._positionDropdown(), n._resizeDropdown();\n          }), t.on('results:message', function () {\n            n._positionDropdown(), n._resizeDropdown();\n          }), t.on('select', function () {\n            n._positionDropdown(), n._resizeDropdown();\n          }), t.on('unselect', function () {\n            n._positionDropdown(), n._resizeDropdown();\n          }), this._containerResultsHandlersBound = !0;\n        }\n      }, e.prototype._attachPositioningHandler = function (e, t) {\n        var n = this,\n            i = 'scroll.select2.' + t.id,\n            r = 'resize.select2.' + t.id,\n            o = 'orientationchange.select2.' + t.id,\n            s = this.$container.parents().filter(a.hasScroll);\n        s.each(function () {\n          a.StoreData(this, 'select2-scroll-position', {\n            x: f(this).scrollLeft(),\n            y: f(this).scrollTop()\n          });\n        }), s.on(i, function (e) {\n          var t = a.GetData(this, 'select2-scroll-position');\n          f(this).scrollTop(t.y);\n        }), f(window).on(i + ' ' + r + ' ' + o, function (e) {\n          n._positionDropdown(), n._resizeDropdown();\n        });\n      }, e.prototype._detachPositioningHandler = function (e, t) {\n        var n = 'scroll.select2.' + t.id,\n            i = 'resize.select2.' + t.id,\n            r = 'orientationchange.select2.' + t.id;\n        this.$container.parents().filter(a.hasScroll).off(n), f(window).off(n + ' ' + i + ' ' + r);\n      }, e.prototype._positionDropdown = function () {\n        var e = f(window),\n            t = this.$dropdown.hasClass('select2-dropdown--above'),\n            n = this.$dropdown.hasClass('select2-dropdown--below'),\n            i = null,\n            r = this.$container.offset();\n        r.bottom = r.top + this.$container.outerHeight(!1);\n        var o = {\n          height: this.$container.outerHeight(!1)\n        };\n        o.top = r.top, o.bottom = r.top + o.height;\n        var s = this.$dropdown.outerHeight(!1),\n            a = e.scrollTop(),\n            l = e.scrollTop() + e.height(),\n            c = a < r.top - s,\n            u = l > r.bottom + s,\n            d = {\n          left: r.left,\n          top: o.bottom\n        },\n            p = this.$dropdownParent;\n        'static' === p.css('position') && (p = p.offsetParent());\n        var h = {\n          top: 0,\n          left: 0\n        };\n        (f.contains(document.body, p[0]) || p[0].isConnected) && (h = p.offset()), d.top -= h.top, d.left -= h.left, t || n || (i = 'below'), u || !c || t ? !c && u && t && (i = 'below') : i = 'above', ('above' == i || t && 'below' !== i) && (d.top = o.top - h.top - s), null != i && (this.$dropdown.removeClass('select2-dropdown--below select2-dropdown--above').addClass('select2-dropdown--' + i), this.$container.removeClass('select2-container--below select2-container--above').addClass('select2-container--' + i)), this.$dropdownContainer.css(d);\n      }, e.prototype._resizeDropdown = function () {\n        var e = {\n          width: this.$container.outerWidth(!1) + 'px'\n        };\n        this.options.get('dropdownAutoWidth') && (e.minWidth = e.width, e.position = 'relative', e.width = 'auto'), this.$dropdown.css(e);\n      }, e.prototype._showDropdown = function (e) {\n        this.$dropdownContainer.appendTo(this.$dropdownParent), this._positionDropdown(), this._resizeDropdown();\n      }, e;\n    }), e.define('select2/dropdown/minimumResultsForSearch', [], function () {\n      function e(e, t, n, i) {\n        this.minimumResultsForSearch = n.get('minimumResultsForSearch'), this.minimumResultsForSearch < 0 && (this.minimumResultsForSearch = 1 / 0), e.call(this, t, n, i);\n      }\n\n      return e.prototype.showSearch = function (e, t) {\n        return !(function e(t) {\n          for (var n = 0, i = 0; i < t.length; i++) {\n            var r = t[i];\n            r.children ? n += e(r.children) : n++;\n          }\n\n          return n;\n        }(t.data.results) < this.minimumResultsForSearch) && e.call(this, t);\n      }, e;\n    }), e.define('select2/dropdown/selectOnClose', ['../utils'], function (o) {\n      function e() {}\n\n      return e.prototype.bind = function (e, t, n) {\n        var i = this;\n        e.call(this, t, n), t.on('close', function (e) {\n          i._handleSelectOnClose(e);\n        });\n      }, e.prototype._handleSelectOnClose = function (e, t) {\n        if (t && null != t.originalSelect2Event) {\n          var n = t.originalSelect2Event;\n          if ('select' === n._type || 'unselect' === n._type) return;\n        }\n\n        var i = this.getHighlightedResults();\n\n        if (!(i.length < 1)) {\n          var r = o.GetData(i[0], 'data');\n          null != r.element && r.element.selected || null == r.element && r.selected || this.trigger('select', {\n            data: r\n          });\n        }\n      }, e;\n    }), e.define('select2/dropdown/closeOnSelect', [], function () {\n      function e() {}\n\n      return e.prototype.bind = function (e, t, n) {\n        var i = this;\n        e.call(this, t, n), t.on('select', function (e) {\n          i._selectTriggered(e);\n        }), t.on('unselect', function (e) {\n          i._selectTriggered(e);\n        });\n      }, e.prototype._selectTriggered = function (e, t) {\n        var n = t.originalEvent;\n        n && (n.ctrlKey || n.metaKey) || this.trigger('close', {\n          originalEvent: n,\n          originalSelect2Event: t\n        });\n      }, e;\n    }), e.define('select2/i18n/en', [], function () {\n      return {\n        errorLoading: function errorLoading() {\n          return 'The results could not be loaded.';\n        },\n        inputTooLong: function inputTooLong(e) {\n          var t = e.input.length - e.maximum,\n              n = 'Please delete ' + t + ' character';\n          return 1 != t && (n += 's'), n;\n        },\n        inputTooShort: function inputTooShort(e) {\n          return 'Please enter ' + (e.minimum - e.input.length) + ' or more characters';\n        },\n        loadingMore: function loadingMore() {\n          return 'Loading more results…';\n        },\n        maximumSelected: function maximumSelected(e) {\n          var t = 'You can only select ' + e.maximum + ' item';\n          return 1 != e.maximum && (t += 's'), t;\n        },\n        noResults: function noResults() {\n          return 'No results found';\n        },\n        searching: function searching() {\n          return 'Searching…';\n        },\n        removeAllItems: function removeAllItems() {\n          return 'Remove all items';\n        }\n      };\n    }), e.define('select2/defaults', ['jquery', 'require', './results', './selection/single', './selection/multiple', './selection/placeholder', './selection/allowClear', './selection/search', './selection/eventRelay', './utils', './translation', './diacritics', './data/select', './data/array', './data/ajax', './data/tags', './data/tokenizer', './data/minimumInputLength', './data/maximumInputLength', './data/maximumSelectionLength', './dropdown', './dropdown/search', './dropdown/hidePlaceholder', './dropdown/infiniteScroll', './dropdown/attachBody', './dropdown/minimumResultsForSearch', './dropdown/selectOnClose', './dropdown/closeOnSelect', './i18n/en'], function (c, u, d, p, h, f, g, m, v, y, s, t, _, w, $, b, A, x, D, S, C, E, O, T, q, j, L, I, e) {\n      function n() {\n        this.reset();\n      }\n\n      return n.prototype.apply = function (e) {\n        if (null == (e = c.extend(!0, {}, this.defaults, e)).dataAdapter) {\n          if (null != e.ajax ? e.dataAdapter = $ : null != e.data ? e.dataAdapter = w : e.dataAdapter = _, 0 < e.minimumInputLength && (e.dataAdapter = y.Decorate(e.dataAdapter, x)), 0 < e.maximumInputLength && (e.dataAdapter = y.Decorate(e.dataAdapter, D)), 0 < e.maximumSelectionLength && (e.dataAdapter = y.Decorate(e.dataAdapter, S)), e.tags && (e.dataAdapter = y.Decorate(e.dataAdapter, b)), null == e.tokenSeparators && null == e.tokenizer || (e.dataAdapter = y.Decorate(e.dataAdapter, A)), null != e.query) {\n            var t = u(e.amdBase + 'compat/query');\n            e.dataAdapter = y.Decorate(e.dataAdapter, t);\n          }\n\n          if (null != e.initSelection) {\n            var n = u(e.amdBase + 'compat/initSelection');\n            e.dataAdapter = y.Decorate(e.dataAdapter, n);\n          }\n        }\n\n        if (null == e.resultsAdapter && (e.resultsAdapter = d, null != e.ajax && (e.resultsAdapter = y.Decorate(e.resultsAdapter, T)), null != e.placeholder && (e.resultsAdapter = y.Decorate(e.resultsAdapter, O)), e.selectOnClose && (e.resultsAdapter = y.Decorate(e.resultsAdapter, L))), null == e.dropdownAdapter) {\n          if (e.multiple) e.dropdownAdapter = C;else {\n            var i = y.Decorate(C, E);\n            e.dropdownAdapter = i;\n          }\n\n          if (0 !== e.minimumResultsForSearch && (e.dropdownAdapter = y.Decorate(e.dropdownAdapter, j)), e.closeOnSelect && (e.dropdownAdapter = y.Decorate(e.dropdownAdapter, I)), null != e.dropdownCssClass || null != e.dropdownCss || null != e.adaptDropdownCssClass) {\n            var r = u(e.amdBase + 'compat/dropdownCss');\n            e.dropdownAdapter = y.Decorate(e.dropdownAdapter, r);\n          }\n\n          e.dropdownAdapter = y.Decorate(e.dropdownAdapter, q);\n        }\n\n        if (null == e.selectionAdapter) {\n          if (e.multiple ? e.selectionAdapter = h : e.selectionAdapter = p, null != e.placeholder && (e.selectionAdapter = y.Decorate(e.selectionAdapter, f)), e.allowClear && (e.selectionAdapter = y.Decorate(e.selectionAdapter, g)), e.multiple && (e.selectionAdapter = y.Decorate(e.selectionAdapter, m)), null != e.containerCssClass || null != e.containerCss || null != e.adaptContainerCssClass) {\n            var o = u(e.amdBase + 'compat/containerCss');\n            e.selectionAdapter = y.Decorate(e.selectionAdapter, o);\n          }\n\n          e.selectionAdapter = y.Decorate(e.selectionAdapter, v);\n        }\n\n        e.language = this._resolveLanguage(e.language), e.language.push('en');\n\n        for (var s = [], a = 0; a < e.language.length; a++) {\n          var l = e.language[a];\n          -1 === s.indexOf(l) && s.push(l);\n        }\n\n        return e.language = s, e.translations = this._processTranslations(e.language, e.debug), e;\n      }, n.prototype.reset = function () {\n        function a(e) {\n          return e.replace(/[^\\u0000-\\u007E]/g, function (e) {\n            return t[e] || e;\n          });\n        }\n\n        this.defaults = {\n          amdBase: './',\n          amdLanguageBase: './i18n/',\n          closeOnSelect: !0,\n          debug: !1,\n          dropdownAutoWidth: !1,\n          escapeMarkup: y.escapeMarkup,\n          language: {},\n          matcher: function e(t, n) {\n            if ('' === c.trim(t.term)) return n;\n\n            if (n.children && 0 < n.children.length) {\n              for (var i = c.extend(!0, {}, n), r = n.children.length - 1; 0 <= r; r--) {\n                null == e(t, n.children[r]) && i.children.splice(r, 1);\n              }\n\n              return 0 < i.children.length ? i : e(t, i);\n            }\n\n            var o = a(n.text).toUpperCase(),\n                s = a(t.term).toUpperCase();\n            return -1 < o.indexOf(s) ? n : null;\n          },\n          minimumInputLength: 0,\n          maximumInputLength: 0,\n          maximumSelectionLength: 0,\n          minimumResultsForSearch: 0,\n          selectOnClose: !1,\n          scrollAfterSelect: !1,\n          sorter: function sorter(e) {\n            return e;\n          },\n          templateResult: function templateResult(e) {\n            return e.text;\n          },\n          templateSelection: function templateSelection(e) {\n            return e.text;\n          },\n          theme: 'default',\n          width: 'resolve'\n        };\n      }, n.prototype.applyFromElement = function (e, t) {\n        var n = e.language,\n            i = this.defaults.language,\n            r = t.prop('lang'),\n            o = t.closest('[lang]').prop('lang'),\n            s = Array.prototype.concat.call(this._resolveLanguage(r), this._resolveLanguage(n), this._resolveLanguage(i), this._resolveLanguage(o));\n        return e.language = s, e;\n      }, n.prototype._resolveLanguage = function (e) {\n        if (!e) return [];\n        if (c.isEmptyObject(e)) return [];\n        if (c.isPlainObject(e)) return [e];\n        var t;\n        t = c.isArray(e) ? e : [e];\n\n        for (var n = [], i = 0; i < t.length; i++) {\n          if (n.push(t[i]), 'string' == typeof t[i] && 0 < t[i].indexOf('-')) {\n            var r = t[i].split('-')[0];\n            n.push(r);\n          }\n        }\n\n        return n;\n      }, n.prototype._processTranslations = function (e, t) {\n        for (var n = new s(), i = 0; i < e.length; i++) {\n          var r = new s(),\n              o = e[i];\n          if ('string' == typeof o) try {\n            r = s.loadPath(o);\n          } catch (e) {\n            try {\n              o = this.defaults.amdLanguageBase + o, r = s.loadPath(o);\n            } catch (e) {\n              t && window.console && console.warn && console.warn('Select2: The language file for \"' + o + '\" could not be automatically loaded. A fallback will be used instead.');\n            }\n          } else r = c.isPlainObject(o) ? new s(o) : o;\n          n.extend(r);\n        }\n\n        return n;\n      }, n.prototype.set = function (e, t) {\n        var n = {};\n        n[c.camelCase(e)] = t;\n\n        var i = y._convertData(n);\n\n        c.extend(!0, this.defaults, i);\n      }, new n();\n    }), e.define('select2/options', ['require', 'jquery', './defaults', './utils'], function (i, d, r, p) {\n      function e(e, t) {\n        if (this.options = e, null != t && this.fromElement(t), null != t && (this.options = r.applyFromElement(this.options, t)), this.options = r.apply(this.options), t && t.is('input')) {\n          var n = i(this.get('amdBase') + 'compat/inputData');\n          this.options.dataAdapter = p.Decorate(this.options.dataAdapter, n);\n        }\n      }\n\n      return e.prototype.fromElement = function (e) {\n        var t = ['select2'];\n        null == this.options.multiple && (this.options.multiple = e.prop('multiple')), null == this.options.disabled && (this.options.disabled = e.prop('disabled')), null == this.options.dir && (e.prop('dir') ? this.options.dir = e.prop('dir') : e.closest('[dir]').prop('dir') ? this.options.dir = e.closest('[dir]').prop('dir') : this.options.dir = 'ltr'), e.prop('disabled', this.options.disabled), e.prop('multiple', this.options.multiple), p.GetData(e[0], 'select2Tags') && (this.options.debug && window.console && console.warn && console.warn('Select2: The `data-select2-tags` attribute has been changed to use the `data-data` and `data-tags=\"true\"` attributes and will be removed in future versions of Select2.'), p.StoreData(e[0], 'data', p.GetData(e[0], 'select2Tags')), p.StoreData(e[0], 'tags', !0)), p.GetData(e[0], 'ajaxUrl') && (this.options.debug && window.console && console.warn && console.warn('Select2: The `data-ajax-url` attribute has been changed to `data-ajax--url` and support for the old attribute will be removed in future versions of Select2.'), e.attr('ajax--url', p.GetData(e[0], 'ajaxUrl')), p.StoreData(e[0], 'ajax-Url', p.GetData(e[0], 'ajaxUrl')));\n        var n = {};\n\n        function i(e, t) {\n          return t.toUpperCase();\n        }\n\n        for (var r = 0; r < e[0].attributes.length; r++) {\n          var o = e[0].attributes[r].name,\n              s = 'data-';\n\n          if (o.substr(0, s.length) == s) {\n            var a = o.substring(s.length),\n                l = p.GetData(e[0], a);\n            n[a.replace(/-([a-z])/g, i)] = l;\n          }\n        }\n\n        d.fn.jquery && '1.' == d.fn.jquery.substr(0, 2) && e[0].dataset && (n = d.extend(!0, {}, e[0].dataset, n));\n        var c = d.extend(!0, {}, p.GetData(e[0]), n);\n\n        for (var u in c = p._convertData(c)) {\n          -1 < d.inArray(u, t) || (d.isPlainObject(this.options[u]) ? d.extend(this.options[u], c[u]) : this.options[u] = c[u]);\n        }\n\n        return this;\n      }, e.prototype.get = function (e) {\n        return this.options[e];\n      }, e.prototype.set = function (e, t) {\n        this.options[e] = t;\n      }, e;\n    }), e.define('select2/core', ['jquery', './options', './utils', './keys'], function (o, c, u, i) {\n      var d = function d(e, t) {\n        null != u.GetData(e[0], 'select2') && u.GetData(e[0], 'select2').destroy(), this.$element = e, this.id = this._generateId(e), t = t || {}, this.options = new c(t, e), d.__super__.constructor.call(this);\n        var n = e.attr('tabindex') || 0;\n        u.StoreData(e[0], 'old-tabindex', n), e.attr('tabindex', '-1');\n        var i = this.options.get('dataAdapter');\n        this.dataAdapter = new i(e, this.options);\n        var r = this.render();\n\n        this._placeContainer(r);\n\n        var o = this.options.get('selectionAdapter');\n        this.selection = new o(e, this.options), this.$selection = this.selection.render(), this.selection.position(this.$selection, r);\n        var s = this.options.get('dropdownAdapter');\n        this.dropdown = new s(e, this.options), this.$dropdown = this.dropdown.render(), this.dropdown.position(this.$dropdown, r);\n        var a = this.options.get('resultsAdapter');\n        this.results = new a(e, this.options, this.dataAdapter), this.$results = this.results.render(), this.results.position(this.$results, this.$dropdown);\n        var l = this;\n        this._bindAdapters(), this._registerDomEvents(), this._registerDataEvents(), this._registerSelectionEvents(), this._registerDropdownEvents(), this._registerResultsEvents(), this._registerEvents(), this.dataAdapter.current(function (e) {\n          l.trigger('selection:update', {\n            data: e\n          });\n        }), e.addClass('select2-hidden-accessible'), e.attr('aria-hidden', 'true'), this._syncAttributes(), u.StoreData(e[0], 'select2', this), e.data('select2', this);\n      };\n\n      return u.Extend(d, u.Observable), d.prototype._generateId = function (e) {\n        return 'select2-' + (null != e.attr('id') ? e.attr('id') : null != e.attr('name') ? e.attr('name') + '-' + u.generateChars(2) : u.generateChars(4)).replace(/(:|\\.|\\[|\\]|,)/g, '');\n      }, d.prototype._placeContainer = function (e) {\n        e.insertAfter(this.$element);\n\n        var t = this._resolveWidth(this.$element, this.options.get('width'));\n\n        null != t && e.css('width', t);\n      }, d.prototype._resolveWidth = function (e, t) {\n        var n = /^width:(([-+]?([0-9]*\\.)?[0-9]+)(px|em|ex|%|in|cm|mm|pt|pc))/i;\n\n        if ('resolve' == t) {\n          var i = this._resolveWidth(e, 'style');\n\n          return null != i ? i : this._resolveWidth(e, 'element');\n        }\n\n        if ('element' == t) {\n          var r = e.outerWidth(!1);\n          return r <= 0 ? 'auto' : r + 'px';\n        }\n\n        if ('style' != t) return 'computedstyle' != t ? t : window.getComputedStyle(e[0]).width;\n        var o = e.attr('style');\n        if ('string' != typeof o) return null;\n\n        for (var s = o.split(';'), a = 0, l = s.length; a < l; a += 1) {\n          var c = s[a].replace(/\\s/g, '').match(n);\n          if (null !== c && 1 <= c.length) return c[1];\n        }\n\n        return null;\n      }, d.prototype._bindAdapters = function () {\n        this.dataAdapter.bind(this, this.$container), this.selection.bind(this, this.$container), this.dropdown.bind(this, this.$container), this.results.bind(this, this.$container);\n      }, d.prototype._registerDomEvents = function () {\n        var t = this;\n        this.$element.on('change.select2', function () {\n          t.dataAdapter.current(function (e) {\n            t.trigger('selection:update', {\n              data: e\n            });\n          });\n        }), this.$element.on('focus.select2', function (e) {\n          t.trigger('focus', e);\n        }), this._syncA = u.bind(this._syncAttributes, this), this._syncS = u.bind(this._syncSubtree, this), this.$element[0].attachEvent && this.$element[0].attachEvent('onpropertychange', this._syncA);\n        var e = window.MutationObserver || window.WebKitMutationObserver || window.MozMutationObserver;\n        null != e ? (this._observer = new e(function (e) {\n          t._syncA(), t._syncS(null, e);\n        }), this._observer.observe(this.$element[0], {\n          attributes: !0,\n          childList: !0,\n          subtree: !1\n        })) : this.$element[0].addEventListener && (this.$element[0].addEventListener('DOMAttrModified', t._syncA, !1), this.$element[0].addEventListener('DOMNodeInserted', t._syncS, !1), this.$element[0].addEventListener('DOMNodeRemoved', t._syncS, !1));\n      }, d.prototype._registerDataEvents = function () {\n        var n = this;\n        this.dataAdapter.on('*', function (e, t) {\n          n.trigger(e, t);\n        });\n      }, d.prototype._registerSelectionEvents = function () {\n        var n = this,\n            i = ['toggle', 'focus'];\n        this.selection.on('toggle', function () {\n          n.toggleDropdown();\n        }), this.selection.on('focus', function (e) {\n          n.focus(e);\n        }), this.selection.on('*', function (e, t) {\n          -1 === o.inArray(e, i) && n.trigger(e, t);\n        });\n      }, d.prototype._registerDropdownEvents = function () {\n        var n = this;\n        this.dropdown.on('*', function (e, t) {\n          n.trigger(e, t);\n        });\n      }, d.prototype._registerResultsEvents = function () {\n        var n = this;\n        this.results.on('*', function (e, t) {\n          n.trigger(e, t);\n        });\n      }, d.prototype._registerEvents = function () {\n        var n = this;\n        this.on('open', function () {\n          n.$container.addClass('select2-container--open');\n        }), this.on('close', function () {\n          n.$container.removeClass('select2-container--open');\n        }), this.on('enable', function () {\n          n.$container.removeClass('select2-container--disabled');\n        }), this.on('disable', function () {\n          n.$container.addClass('select2-container--disabled');\n        }), this.on('blur', function () {\n          n.$container.removeClass('select2-container--focus');\n        }), this.on('query', function (t) {\n          n.isOpen() || n.trigger('open', {}), this.dataAdapter.query(t, function (e) {\n            n.trigger('results:all', {\n              data: e,\n              query: t\n            });\n          });\n        }), this.on('query:append', function (t) {\n          this.dataAdapter.query(t, function (e) {\n            n.trigger('results:append', {\n              data: e,\n              query: t\n            });\n          });\n        }), this.on('keypress', function (e) {\n          var t = e.which;\n          n.isOpen() ? t === i.ESC || t === i.TAB || t === i.UP && e.altKey ? (n.close(e), e.preventDefault()) : t === i.ENTER ? (n.trigger('results:select', {}), e.preventDefault()) : t === i.SPACE && e.ctrlKey ? (n.trigger('results:toggle', {}), e.preventDefault()) : t === i.UP ? (n.trigger('results:previous', {}), e.preventDefault()) : t === i.DOWN && (n.trigger('results:next', {}), e.preventDefault()) : (t === i.ENTER || t === i.SPACE || t === i.DOWN && e.altKey) && (n.open(), e.preventDefault());\n        });\n      }, d.prototype._syncAttributes = function () {\n        this.options.set('disabled', this.$element.prop('disabled')), this.isDisabled() ? (this.isOpen() && this.close(), this.trigger('disable', {})) : this.trigger('enable', {});\n      }, d.prototype._isChangeMutation = function (e, t) {\n        var n = !1,\n            i = this;\n\n        if (!e || !e.target || 'OPTION' === e.target.nodeName || 'OPTGROUP' === e.target.nodeName) {\n          if (t) {\n            if (t.addedNodes && 0 < t.addedNodes.length) for (var r = 0; r < t.addedNodes.length; r++) {\n              t.addedNodes[r].selected && (n = !0);\n            } else t.removedNodes && 0 < t.removedNodes.length ? n = !0 : o.isArray(t) && o.each(t, function (e, t) {\n              if (i._isChangeMutation(e, t)) return !(n = !0);\n            });\n          } else n = !0;\n\n          return n;\n        }\n      }, d.prototype._syncSubtree = function (e, t) {\n        var n = this._isChangeMutation(e, t),\n            i = this;\n\n        n && this.dataAdapter.current(function (e) {\n          i.trigger('selection:update', {\n            data: e\n          });\n        });\n      }, d.prototype.trigger = function (e, t) {\n        var n = d.__super__.trigger,\n            i = {\n          open: 'opening',\n          close: 'closing',\n          select: 'selecting',\n          unselect: 'unselecting',\n          clear: 'clearing'\n        };\n\n        if (void 0 === t && (t = {}), e in i) {\n          var r = i[e],\n              o = {\n            prevented: !1,\n            name: e,\n            args: t\n          };\n          if (n.call(this, r, o), o.prevented) return void (t.prevented = !0);\n        }\n\n        n.call(this, e, t);\n      }, d.prototype.toggleDropdown = function () {\n        this.isDisabled() || (this.isOpen() ? this.close() : this.open());\n      }, d.prototype.open = function () {\n        this.isOpen() || this.isDisabled() || this.trigger('query', {});\n      }, d.prototype.close = function (e) {\n        this.isOpen() && this.trigger('close', {\n          originalEvent: e\n        });\n      }, d.prototype.isEnabled = function () {\n        return !this.isDisabled();\n      }, d.prototype.isDisabled = function () {\n        return this.options.get('disabled');\n      }, d.prototype.isOpen = function () {\n        return this.$container.hasClass('select2-container--open');\n      }, d.prototype.hasFocus = function () {\n        return this.$container.hasClass('select2-container--focus');\n      }, d.prototype.focus = function (e) {\n        this.hasFocus() || (this.$container.addClass('select2-container--focus'), this.trigger('focus', {}));\n      }, d.prototype.enable = function (e) {\n        this.options.get('debug') && window.console && console.warn && console.warn('Select2: The `select2(\"enable\")` method has been deprecated and will be removed in later Select2 versions. Use $element.prop(\"disabled\") instead.'), null != e && 0 !== e.length || (e = [!0]);\n        var t = !e[0];\n        this.$element.prop('disabled', t);\n      }, d.prototype.data = function () {\n        this.options.get('debug') && 0 < arguments.length && window.console && console.warn && console.warn('Select2: Data can no longer be set using `select2(\"data\")`. You should consider setting the value instead using `$element.val()`.');\n        var t = [];\n        return this.dataAdapter.current(function (e) {\n          t = e;\n        }), t;\n      }, d.prototype.val = function (e) {\n        if (this.options.get('debug') && window.console && console.warn && console.warn('Select2: The `select2(\"val\")` method has been deprecated and will be removed in later Select2 versions. Use $element.val() instead.'), null == e || 0 === e.length) return this.$element.val();\n        var t = e[0];\n        o.isArray(t) && (t = o.map(t, function (e) {\n          return e.toString();\n        })), this.$element.val(t).trigger('input').trigger('change');\n      }, d.prototype.destroy = function () {\n        this.$container.remove(), this.$element[0].detachEvent && this.$element[0].detachEvent('onpropertychange', this._syncA), null != this._observer ? (this._observer.disconnect(), this._observer = null) : this.$element[0].removeEventListener && (this.$element[0].removeEventListener('DOMAttrModified', this._syncA, !1), this.$element[0].removeEventListener('DOMNodeInserted', this._syncS, !1), this.$element[0].removeEventListener('DOMNodeRemoved', this._syncS, !1)), this._syncA = null, this._syncS = null, this.$element.off('.select2'), this.$element.attr('tabindex', u.GetData(this.$element[0], 'old-tabindex')), this.$element.removeClass('select2-hidden-accessible'), this.$element.attr('aria-hidden', 'false'), u.RemoveData(this.$element[0]), this.$element.removeData('select2'), this.dataAdapter.destroy(), this.selection.destroy(), this.dropdown.destroy(), this.results.destroy(), this.dataAdapter = null, this.selection = null, this.dropdown = null, this.results = null;\n      }, d.prototype.render = function () {\n        var e = o('<span class=\"select2 select2-container\"><span class=\"selection\"></span><span class=\"dropdown-wrapper\" aria-hidden=\"true\"></span></span>');\n        return e.attr('dir', this.options.get('dir')), this.$container = e, this.$container.addClass('select2-container--' + this.options.get('theme')), u.StoreData(e[0], 'element', this.$element), e;\n      }, d;\n    }), e.define('select2/compat/utils', ['jquery'], function (s) {\n      return {\n        syncCssClasses: function syncCssClasses(e, t, n) {\n          var i,\n              r,\n              o = [];\n          (i = s.trim(e.attr('class'))) && s((i = '' + i).split(/\\s+/)).each(function () {\n            0 === this.indexOf('select2-') && o.push(this);\n          }), (i = s.trim(t.attr('class'))) && s((i = '' + i).split(/\\s+/)).each(function () {\n            0 !== this.indexOf('select2-') && null != (r = n(this)) && o.push(r);\n          }), e.attr('class', o.join(' '));\n        }\n      };\n    }), e.define('select2/compat/containerCss', ['jquery', './utils'], function (s, a) {\n      function l(e) {\n        return null;\n      }\n\n      function e() {}\n\n      return e.prototype.render = function (e) {\n        var t = e.call(this),\n            n = this.options.get('containerCssClass') || '';\n        s.isFunction(n) && (n = n(this.$element));\n        var i = this.options.get('adaptContainerCssClass');\n\n        if (i = i || l, -1 !== n.indexOf(':all:')) {\n          n = n.replace(':all:', '');\n          var r = i;\n\n          i = function i(e) {\n            var t = r(e);\n            return null != t ? t + ' ' + e : e;\n          };\n        }\n\n        var o = this.options.get('containerCss') || {};\n        return s.isFunction(o) && (o = o(this.$element)), a.syncCssClasses(t, this.$element, i), t.css(o), t.addClass(n), t;\n      }, e;\n    }), e.define('select2/compat/dropdownCss', ['jquery', './utils'], function (s, a) {\n      function l(e) {\n        return null;\n      }\n\n      function e() {}\n\n      return e.prototype.render = function (e) {\n        var t = e.call(this),\n            n = this.options.get('dropdownCssClass') || '';\n        s.isFunction(n) && (n = n(this.$element));\n        var i = this.options.get('adaptDropdownCssClass');\n\n        if (i = i || l, -1 !== n.indexOf(':all:')) {\n          n = n.replace(':all:', '');\n          var r = i;\n\n          i = function i(e) {\n            var t = r(e);\n            return null != t ? t + ' ' + e : e;\n          };\n        }\n\n        var o = this.options.get('dropdownCss') || {};\n        return s.isFunction(o) && (o = o(this.$element)), a.syncCssClasses(t, this.$element, i), t.css(o), t.addClass(n), t;\n      }, e;\n    }), e.define('select2/compat/initSelection', ['jquery'], function (i) {\n      function e(e, t, n) {\n        n.get('debug') && window.console && console.warn && console.warn('Select2: The `initSelection` option has been deprecated in favor of a custom data adapter that overrides the `current` method. This method is now called multiple times instead of a single time when the instance is initialized. Support will be removed for the `initSelection` option in future versions of Select2'), this.initSelection = n.get('initSelection'), this._isInitialized = !1, e.call(this, t, n);\n      }\n\n      return e.prototype.current = function (e, t) {\n        var n = this;\n        this._isInitialized ? e.call(this, t) : this.initSelection.call(null, this.$element, function (e) {\n          n._isInitialized = !0, i.isArray(e) || (e = [e]), t(e);\n        });\n      }, e;\n    }), e.define('select2/compat/inputData', ['jquery', '../utils'], function (s, i) {\n      function e(e, t, n) {\n        this._currentData = [], this._valueSeparator = n.get('valueSeparator') || ',', 'hidden' === t.prop('type') && n.get('debug') && console && console.warn && console.warn('Select2: Using a hidden input with Select2 is no longer supported and may stop working in the future. It is recommended to use a `<select>` element instead.'), e.call(this, t, n);\n      }\n\n      return e.prototype.current = function (e, t) {\n        function i(e, t) {\n          var n = [];\n          return e.selected || -1 !== s.inArray(e.id, t) ? (e.selected = !0, n.push(e)) : e.selected = !1, e.children && n.push.apply(n, i(e.children, t)), n;\n        }\n\n        for (var n = [], r = 0; r < this._currentData.length; r++) {\n          var o = this._currentData[r];\n          n.push.apply(n, i(o, this.$element.val().split(this._valueSeparator)));\n        }\n\n        t(n);\n      }, e.prototype.select = function (e, t) {\n        if (this.options.get('multiple')) {\n          var n = this.$element.val();\n          n += this._valueSeparator + t.id, this.$element.val(n), this.$element.trigger('input').trigger('change');\n        } else this.current(function (e) {\n          s.map(e, function (e) {\n            e.selected = !1;\n          });\n        }), this.$element.val(t.id), this.$element.trigger('input').trigger('change');\n      }, e.prototype.unselect = function (e, r) {\n        var o = this;\n        r.selected = !1, this.current(function (e) {\n          for (var t = [], n = 0; n < e.length; n++) {\n            var i = e[n];\n            r.id != i.id && t.push(i.id);\n          }\n\n          o.$element.val(t.join(o._valueSeparator)), o.$element.trigger('input').trigger('change');\n        });\n      }, e.prototype.query = function (e, t, n) {\n        for (var i = [], r = 0; r < this._currentData.length; r++) {\n          var o = this._currentData[r],\n              s = this.matches(t, o);\n          null !== s && i.push(s);\n        }\n\n        n({\n          results: i\n        });\n      }, e.prototype.addOptions = function (e, t) {\n        var n = s.map(t, function (e) {\n          return i.GetData(e[0], 'data');\n        });\n\n        this._currentData.push.apply(this._currentData, n);\n      }, e;\n    }), e.define('select2/compat/matcher', ['jquery'], function (s) {\n      return function (o) {\n        return function (e, t) {\n          var n = s.extend(!0, {}, t);\n          if (null == e.term || '' === s.trim(e.term)) return n;\n\n          if (t.children) {\n            for (var i = t.children.length - 1; 0 <= i; i--) {\n              var r = t.children[i];\n              o(e.term, r.text, r) || n.children.splice(i, 1);\n            }\n\n            if (0 < n.children.length) return n;\n          }\n\n          return o(e.term, t.text, t) ? n : null;\n        };\n      };\n    }), e.define('select2/compat/query', [], function () {\n      function e(e, t, n) {\n        n.get('debug') && window.console && console.warn && console.warn('Select2: The `query` option has been deprecated in favor of a custom data adapter that overrides the `query` method. Support will be removed for the `query` option in future versions of Select2.'), e.call(this, t, n);\n      }\n\n      return e.prototype.query = function (e, t, n) {\n        t.callback = n, this.options.get('query').call(null, t);\n      }, e;\n    }), e.define('select2/dropdown/attachContainer', [], function () {\n      function e(e, t, n) {\n        e.call(this, t, n);\n      }\n\n      return e.prototype.position = function (e, t, n) {\n        n.find('.dropdown-wrapper').append(t), t.addClass('select2-dropdown--below'), n.addClass('select2-container--below');\n      }, e;\n    }), e.define('select2/dropdown/stopPropagation', [], function () {\n      function e() {}\n\n      return e.prototype.bind = function (e, t, n) {\n        e.call(this, t, n);\n        this.$dropdown.on(['blur', 'change', 'click', 'dblclick', 'focus', 'focusin', 'focusout', 'input', 'keydown', 'keyup', 'keypress', 'mousedown', 'mouseenter', 'mouseleave', 'mousemove', 'mouseover', 'mouseup', 'search', 'touchend', 'touchstart'].join(' '), function (e) {\n          e.stopPropagation();\n        });\n      }, e;\n    }), e.define('select2/selection/stopPropagation', [], function () {\n      function e() {}\n\n      return e.prototype.bind = function (e, t, n) {\n        e.call(this, t, n);\n        this.$selection.on(['blur', 'change', 'click', 'dblclick', 'focus', 'focusin', 'focusout', 'input', 'keydown', 'keyup', 'keypress', 'mousedown', 'mouseenter', 'mouseleave', 'mousemove', 'mouseover', 'mouseup', 'search', 'touchend', 'touchstart'].join(' '), function (e) {\n          e.stopPropagation();\n        });\n      }, e;\n    }), l = function l(p) {\n      var h,\n          f,\n          e = ['wheel', 'mousewheel', 'DOMMouseScroll', 'MozMousePixelScroll'],\n          t = 'onwheel' in document || 9 <= document.documentMode ? ['wheel'] : ['mousewheel', 'DomMouseScroll', 'MozMousePixelScroll'],\n          g = Array.prototype.slice;\n      if (p.event.fixHooks) for (var n = e.length; n;) {\n        p.event.fixHooks[e[--n]] = p.event.mouseHooks;\n      }\n      var m = p.event.special.mousewheel = {\n        version: '3.1.12',\n        setup: function setup() {\n          if (this.addEventListener) for (var e = t.length; e;) {\n            this.addEventListener(t[--e], i, !1);\n          } else this.onmousewheel = i;\n          p.data(this, 'mousewheel-line-height', m.getLineHeight(this)), p.data(this, 'mousewheel-page-height', m.getPageHeight(this));\n        },\n        teardown: function teardown() {\n          if (this.removeEventListener) for (var e = t.length; e;) {\n            this.removeEventListener(t[--e], i, !1);\n          } else this.onmousewheel = null;\n          p.removeData(this, 'mousewheel-line-height'), p.removeData(this, 'mousewheel-page-height');\n        },\n        getLineHeight: function getLineHeight(e) {\n          var t = p(e),\n              n = t['offsetParent' in p.fn ? 'offsetParent' : 'parent']();\n          return n.length || (n = p('body')), parseInt(n.css('fontSize'), 10) || parseInt(t.css('fontSize'), 10) || 16;\n        },\n        getPageHeight: function getPageHeight(e) {\n          return p(e).height();\n        },\n        settings: {\n          adjustOldDeltas: !0,\n          normalizeOffset: !0\n        }\n      };\n\n      function i(e) {\n        var t,\n            n = e || window.event,\n            i = g.call(arguments, 1),\n            r = 0,\n            o = 0,\n            s = 0,\n            a = 0,\n            l = 0;\n\n        if ((e = p.event.fix(n)).type = 'mousewheel', 'detail' in n && (s = -1 * n.detail), 'wheelDelta' in n && (s = n.wheelDelta), 'wheelDeltaY' in n && (s = n.wheelDeltaY), 'wheelDeltaX' in n && (o = -1 * n.wheelDeltaX), 'axis' in n && n.axis === n.HORIZONTAL_AXIS && (o = -1 * s, s = 0), r = 0 === s ? o : s, 'deltaY' in n && (r = s = -1 * n.deltaY), 'deltaX' in n && (o = n.deltaX, 0 === s && (r = -1 * o)), 0 !== s || 0 !== o) {\n          if (1 === n.deltaMode) {\n            var c = p.data(this, 'mousewheel-line-height');\n            r *= c, s *= c, o *= c;\n          } else if (2 === n.deltaMode) {\n            var u = p.data(this, 'mousewheel-page-height');\n            r *= u, s *= u, o *= u;\n          }\n\n          if (t = Math.max(Math.abs(s), Math.abs(o)), (!f || t < f) && y(n, f = t) && (f /= 40), y(n, t) && (r /= 40, o /= 40, s /= 40), r = Math[1 <= r ? 'floor' : 'ceil'](r / f), o = Math[1 <= o ? 'floor' : 'ceil'](o / f), s = Math[1 <= s ? 'floor' : 'ceil'](s / f), m.settings.normalizeOffset && this.getBoundingClientRect) {\n            var d = this.getBoundingClientRect();\n            a = e.clientX - d.left, l = e.clientY - d.top;\n          }\n\n          return e.deltaX = o, e.deltaY = s, e.deltaFactor = f, e.offsetX = a, e.offsetY = l, e.deltaMode = 0, i.unshift(e, r, o, s), h && clearTimeout(h), h = setTimeout(v, 200), (p.event.dispatch || p.event.handle).apply(this, i);\n        }\n      }\n\n      function v() {\n        f = null;\n      }\n\n      function y(e, t) {\n        return m.settings.adjustOldDeltas && 'mousewheel' === e.type && t % 120 == 0;\n      }\n\n      p.fn.extend({\n        mousewheel: function mousewheel(e) {\n          return e ? this.bind('mousewheel', e) : this.trigger('mousewheel');\n        },\n        unmousewheel: function unmousewheel(e) {\n          return this.unbind('mousewheel', e);\n        }\n      });\n    }, 'function' == typeof e.define && e.define.amd ? e.define('jquery-mousewheel', ['jquery'], l) : 'object' == (typeof exports === \"undefined\" ? \"undefined\" : (0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__.default)(exports)) ? module.exports = l : l(d), e.define('jquery.select2', ['jquery', 'jquery-mousewheel', './select2/core', './select2/defaults', './select2/utils'], function (r, e, o, t, s) {\n      if (null == r.fn.select2) {\n        var a = ['open', 'close', 'destroy'];\n\n        r.fn.select2 = function (t) {\n          if ('object' == (0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__.default)(t = t || {})) return this.each(function () {\n            var e = r.extend(!0, {}, t);\n            new o(r(this), e);\n          }), this;\n          if ('string' != typeof t) throw new Error('Invalid arguments for Select2: ' + t);\n          var n,\n              i = Array.prototype.slice.call(arguments, 1);\n          return this.each(function () {\n            var e = s.GetData(this, 'select2');\n            null == e && window.console && console.error && console.error(\"The select2('\" + t + \"') method was called on an element that is not using Select2.\"), n = e[t].apply(e, i);\n          }), -1 < r.inArray(t, a) ? this : n;\n        };\n      }\n\n      return null == r.fn.select2.defaults && (r.fn.select2.defaults = t), o;\n    }), {\n      define: e.define,\n      require: e.require\n    };\n  }(),\n      t = e.require('jquery.select2');\n\n  return d.fn.select2.amd = e, t;\n}); // import jQuery from 'jquery';\n// wp.customize('blogname', (value) => {\n//   value.bind(to => jQuery('.brand').text(to));\n// });\n\nwp.customize('blogdescription', function (value) {\n  value.bind(function (to) {\n    return jQuery('.site-footer--title').text(to);\n  });\n});\nwp.customize('home_about_text', function (value) {\n  value.bind(function (to) {\n    return jQuery('.home-about--title').text(to);\n  });\n});\nwp.customize('home_about_button', function (value) {\n  value.bind(function (to) {\n    return jQuery('.home-about--button span').text(to);\n  });\n});\nwp.customize('home_projects_text', function (value) {\n  value.bind(function (to) {\n    return jQuery('.home-projects--intro--text').text(to);\n  });\n});\nwp.customize('newsletter_heading', function (value) {\n  value.bind(function (to) {\n    return jQuery('.newsletter-signup--heading').text(to);\n  });\n});\nwp.customize('newsletter_disclaimer', function (value) {\n  value.bind(function (to) {\n    return jQuery('.newsletter-signup--disclaimer').html(to);\n  });\n});\nwp.customize('contact_phone_human', function (value) {\n  value.bind(function (to) {\n    return jQuery('.contact-phone').text(to);\n  });\n});\nwp.customize('contact_email', function (value) {\n  value.bind(function (to) {\n    return jQuery('.contact-email').text(to);\n  });\n});\nwp.customize('contact_address', function (value) {\n  value.bind(function (to) {\n    return jQuery('.contact-address').text(to);\n  });\n});\nwp.customize('home_sketchbook_text', function (value) {\n  value.bind(function (to) {\n    return jQuery('.home-scrapbook--intro').text(to);\n  });\n});\nwp.customize('home_sketchbook_button', function (value) {\n  value.bind(function (to) {\n    return jQuery('.home-scrapbook--button span').text(to);\n  });\n});\njQuery(function () {\n  'use strict';\n  /**\n   * Sortable Repeater Custom Control\n   *\n   * @author Anthony Hortin <http://maddisondesigns.com>\n   * @license http://www.gnu.org/licenses/gpl-2.0.html\n   * @link https://github.com/maddisondesigns\n   */\n  // Update the values for all our input fields and initialise the sortable repeater\n\n  jQuery('.sortable_repeater_control').each(function () {\n    // If there is an existing customizer value, populate our rows\n    var defaultValuesArray = $(this).find('.customize-control-sortable-repeater').val().split(',');\n    var numRepeaterItems = defaultValuesArray.length;\n\n    if (numRepeaterItems > 0) {\n      // Add the first item to our existing input field\n      $(this).find('.repeater-input').val(defaultValuesArray[0]); // Create a new row for each new value\n\n      if (numRepeaterItems > 1) {\n        var i;\n\n        for (i = 1; i < numRepeaterItems; ++i) {\n          skyrocketAppendRow($(this), defaultValuesArray[i]);\n        }\n      }\n    }\n  }); // Make our Repeater fields sortable\n\n  setTimeout(function () {\n    jQuery('.sortable_repeater.sortable').sortable({\n      update: function update(event, ui) {\n        skyrocketGetAllInputs($(this).parent());\n      }\n    });\n  }, 5000); // Remove item starting from it's parent element\n\n  $('.sortable_repeater.sortable').on('click', '.customize-control-sortable-repeater-delete', function (event) {\n    event.preventDefault();\n    var numItems = $(this).parent().parent().find('.repeater').length;\n\n    if (numItems > 1) {\n      $(this).parent().slideUp('fast', function () {\n        var parentContainer = $(this).parent().parent();\n        $(this).remove();\n        skyrocketGetAllInputs(parentContainer);\n      });\n    } else {\n      $(this).parent().find('.repeater-input').val('');\n      skyrocketGetAllInputs($(this).parent().parent().parent());\n    }\n  }); // Add new item\n\n  $('.customize-control-sortable-repeater-add').click(function (event) {\n    event.preventDefault();\n    skyrocketAppendRow($(this).parent());\n    skyrocketGetAllInputs($(this).parent());\n  }); // Refresh our hidden field if any fields change\n\n  $('.sortable_repeater.sortable').change(function () {\n    skyrocketGetAllInputs($(this).parent());\n  }); // Add https:// to the start of the URL if it doesn't have it\n\n  $('.sortable_repeater.sortable').on('blur', '.repeater-input', function () {\n    var url = $(this);\n    var val = url.val();\n\n    if (val && !val.match(/^.+:\\/\\/.*/)) {\n      // Important! Make sure to trigger change event so Customizer knows it has to save the field\n      url.val('https://' + val).trigger('change');\n    }\n  }); // Append a new row to our list of elements\n\n  function skyrocketAppendRow($element) {\n    var defaultValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n    var newRow = '<div class=\"repeater\" style=\"display:none\"><input type=\"text\" value=\"' + defaultValue + '\" class=\"repeater-input\" placeholder=\"https://\" /><span class=\"dashicons dashicons-sort\"></span><a class=\"customize-control-sortable-repeater-delete\" href=\"#\"><span class=\"dashicons dashicons-no-alt\"></span></a></div>';\n    $element.find('.sortable').append(newRow);\n    $element.find('.sortable').find('.repeater:last').slideDown('slow', function () {\n      $(this).find('input').focus();\n    });\n  } // Get the values from the repeater input fields and add to our hidden field\n\n\n  function skyrocketGetAllInputs($element) {\n    var inputValues = $element.find('.repeater-input').map(function () {\n      return $(this).val();\n    }).toArray(); // Add all the values from our repeater fields to the hidden field (which is the one that actually gets saved)\n\n    $element.find('.customize-control-sortable-repeater').val(inputValues); // Important! Make sure to trigger change event so Customizer knows it has to save the field\n\n    $element.find('.customize-control-sortable-repeater').trigger('change');\n  }\n  /**\n   * Slider Custom Control\n   *\n   * @author Anthony Hortin <http://maddisondesigns.com>\n   * @license http://www.gnu.org/licenses/gpl-2.0.html\n   * @link https://github.com/maddisondesigns\n   */\n  // Set our slider defaults and initialise the slider\n\n\n  $('.slider-custom-control').each(function () {\n    var sliderValue = $(this).find('.customize-control-slider-value').val();\n    var newSlider = $(this).find('.slider');\n    var sliderMinValue = parseFloat(newSlider.attr('slider-min-value'));\n    var sliderMaxValue = parseFloat(newSlider.attr('slider-max-value'));\n    var sliderStepValue = parseFloat(newSlider.attr('slider-step-value'));\n    newSlider.slider({\n      value: sliderValue,\n      min: sliderMinValue,\n      max: sliderMaxValue,\n      step: sliderStepValue,\n      change: function change(e, ui) {\n        // Important! When slider stops moving make sure to trigger change event so Customizer knows it has to save the field\n        $(this).parent().find('.customize-control-slider-value').trigger('change');\n      }\n    });\n  }); // Change the value of the input field as the slider is moved\n\n  $('.slider').on('slide', function (event, ui) {\n    $(this).parent().find('.customize-control-slider-value').val(ui.value);\n  }); // Reset slider and input field back to the default value\n\n  $('.slider-reset').on('click', function () {\n    var resetValue = $(this).attr('slider-reset-value');\n    $(this).parent().find('.customize-control-slider-value').val(resetValue);\n    $(this).parent().find('.slider').slider('value', resetValue);\n  }); // Update slider if the input field loses focus as it's most likely changed\n\n  $('.customize-control-slider-value').blur(function () {\n    var resetValue = $(this).val();\n    var slider = $(this).parent().find('.slider');\n    var sliderMinValue = parseInt(slider.attr('slider-min-value'));\n    var sliderMaxValue = parseInt(slider.attr('slider-max-value')); // Make sure our manual input value doesn't exceed the minimum & maxmium values\n\n    if (resetValue < sliderMinValue) {\n      resetValue = sliderMinValue;\n      $(this).val(resetValue);\n    }\n\n    if (resetValue > sliderMaxValue) {\n      resetValue = sliderMaxValue;\n      $(this).val(resetValue);\n    }\n\n    $(this).parent().find('.slider').slider('value', resetValue);\n  });\n  /**\n   * Single Accordion Custom Control\n   *\n   * @author Anthony Hortin <http://maddisondesigns.com>\n   * @license http://www.gnu.org/licenses/gpl-2.0.html\n   * @link https://github.com/maddisondesigns\n   */\n\n  $('.single-accordion-toggle').click(function () {\n    var $accordionToggle = $(this);\n    $(this).parent().find('.single-accordion').slideToggle('slow', function () {\n      $accordionToggle.toggleClass('single-accordion-toggle-rotate', $(this).is(':visible'));\n    });\n  });\n  /**\n   * Image Checkbox Custom Control\n   *\n   * @author Anthony Hortin <http://maddisondesigns.com>\n   * @license http://www.gnu.org/licenses/gpl-2.0.html\n   * @link https://github.com/maddisondesigns\n   */\n\n  $('.multi-image-checkbox').on('change', function () {\n    skyrocketGetAllImageCheckboxes($(this).parent().parent());\n  }); // Get the values from the checkboxes and add to our hidden field\n\n  function skyrocketGetAllImageCheckboxes($element) {\n    var inputValues = $element.find('.multi-image-checkbox').map(function () {\n      if ($(this).is(':checked')) {\n        return $(this).val();\n      }\n    }).toArray(); // Important! Make sure to trigger change event so Customizer knows it has to save the field\n\n    $element.find('.customize-control-multi-image-checkbox').val(inputValues).trigger('change');\n  }\n  /**\n   * Pill Checkbox Custom Control\n   *\n   * @author Anthony Hortin <http://maddisondesigns.com>\n   * @license http://www.gnu.org/licenses/gpl-2.0.html\n   * @link https://github.com/maddisondesigns\n   */\n\n\n  $('.pill_checkbox_control .sortable').sortable({\n    placeholder: 'pill-ui-state-highlight',\n    update: function update(event, ui) {\n      skyrocketGetAllPillCheckboxes($(this).parent());\n    }\n  });\n  $('.pill_checkbox_control .sortable-pill-checkbox').on('change', function () {\n    skyrocketGetAllPillCheckboxes($(this).parent().parent().parent());\n  }); // Get the values from the checkboxes and add to our hidden field\n\n  function skyrocketGetAllPillCheckboxes($element) {\n    var inputValues = $element.find('.sortable-pill-checkbox').map(function () {\n      if ($(this).is(':checked')) {\n        return $(this).val();\n      }\n    }).toArray();\n    $element.find('.customize-control-sortable-pill-checkbox').val(inputValues).trigger('change');\n  }\n  /**\n   * Dropdown Select2 Custom Control\n   *\n   * @author Anthony Hortin <http://maddisondesigns.com>\n   * @license http://www.gnu.org/licenses/gpl-2.0.html\n   * @link https://github.com/maddisondesigns\n   */\n\n\n  $('.customize-control-dropdown-select2').each(function () {\n    $('.customize-control-select2').select2({\n      allowClear: true\n    });\n  });\n  $('.customize-control-select2').on('change', function () {\n    var select2Val = $(this).val();\n    $(this).parent().find('.customize-control-dropdown-select2').val(select2Val).trigger('change');\n  });\n  /**\n   * Googe Font Select Custom Control\n   *\n   * @author Anthony Hortin <http://maddisondesigns.com>\n   * @license http://www.gnu.org/licenses/gpl-2.0.html\n   * @link https://github.com/maddisondesigns\n   */\n\n  $('.google-fonts-list').each(function (i, obj) {\n    if (!$(obj).hasClass('select2-hidden-accessible')) {\n      $(obj).select2();\n    }\n  });\n  $('.google-fonts-list').on('change', function () {\n    var elementRegularWeight = $(this).parent().parent().find('.google-fonts-regularweight-style');\n    var elementItalicWeight = $(this).parent().parent().find('.google-fonts-italicweight-style');\n    var elementBoldWeight = $(this).parent().parent().find('.google-fonts-boldweight-style');\n    var selectedFont = $(this).val();\n    var customizerControlName = $(this).attr('control-name');\n    var elementItalicWeightCount = 0;\n    var elementBoldWeightCount = 0; // Clear Weight/Style dropdowns\n\n    elementRegularWeight.empty();\n    elementItalicWeight.empty();\n    elementBoldWeight.empty(); // Make sure Italic & Bold dropdowns are enabled\n\n    elementItalicWeight.prop('disabled', false);\n    elementBoldWeight.prop('disabled', false); // Get the Google Fonts control object\n\n    var bodyfontcontrol = _wpCustomizeSettings.controls[customizerControlName]; // Find the index of the selected font\n\n    var indexes = $.map(bodyfontcontrol.skyrocketfontslist, function (obj, index) {\n      if (obj.family === selectedFont) {\n        return index;\n      }\n    });\n    var index = indexes[0]; // For the selected Google font show the available weight/style variants\n\n    $.each(bodyfontcontrol.skyrocketfontslist[index].variants, function (val, text) {\n      elementRegularWeight.append($('<option></option>').val(text).html(text));\n\n      if (text.indexOf('italic') >= 0) {\n        elementItalicWeight.append($('<option></option>').val(text).html(text));\n        elementItalicWeightCount++;\n      } else {\n        elementBoldWeight.append($('<option></option>').val(text).html(text));\n        elementBoldWeightCount++;\n      }\n    });\n\n    if (elementItalicWeightCount == 0) {\n      elementItalicWeight.append($('<option></option>').val('').html('Not Available for this font'));\n      elementItalicWeight.prop('disabled', 'disabled');\n    }\n\n    if (elementBoldWeightCount == 0) {\n      elementBoldWeight.append($('<option></option>').val('').html('Not Available for this font'));\n      elementBoldWeight.prop('disabled', 'disabled');\n    } // Update the font category based on the selected font\n\n\n    $(this).parent().parent().find('.google-fonts-category').val(bodyfontcontrol.skyrocketfontslist[index].category);\n    skyrocketGetAllSelects($(this).parent().parent());\n  });\n  $('.google_fonts_select_control select').on('change', function () {\n    skyrocketGetAllSelects($(this).parent().parent());\n  });\n\n  function skyrocketGetAllSelects($element) {\n    var selectedFont = {\n      font: $element.find('.google-fonts-list').val(),\n      regularweight: $element.find('.google-fonts-regularweight-style').val(),\n      italicweight: $element.find('.google-fonts-italicweight-style').val(),\n      boldweight: $element.find('.google-fonts-boldweight-style').val(),\n      category: $element.find('.google-fonts-category').val()\n    }; // Important! Make sure to trigger change event so Customizer knows it has to save the field\n\n    $element.find('.customize-control-google-font-selection').val(JSON.stringify(selectedFont)).trigger('change');\n  }\n  /**\n   * TinyMCE Custom Control\n   *\n   * @author Anthony Hortin <http://maddisondesigns.com>\n   * @license http://www.gnu.org/licenses/gpl-2.0.html\n   * @link https://github.com/maddisondesigns\n   */\n\n\n  $('.customize-control-tinymce-editor').each(function () {\n    // Get the toolbar strings that were passed from the PHP Class\n    var tinyMCEToolbar1String = _wpCustomizeSettings.controls[$(this).attr('id')].skyrockettinymcetoolbar1;\n\n    var tinyMCEToolbar2String = _wpCustomizeSettings.controls[$(this).attr('id')].skyrockettinymcetoolbar2;\n\n    var tinyMCEMediaButtons = _wpCustomizeSettings.controls[$(this).attr('id')].skyrocketmediabuttons;\n\n    wp.editor.initialize($(this).attr('id'), {\n      tinymce: {\n        wpautop: true,\n        toolbar1: tinyMCEToolbar1String,\n        toolbar2: tinyMCEToolbar2String\n      },\n      quicktags: true,\n      mediaButtons: tinyMCEMediaButtons\n    });\n  });\n  $(document).on('tinymce-editor-init', function (event, editor) {\n    editor.on('change', function (e) {\n      tinyMCE.triggerSave();\n      $('#' + editor.id).trigger('change');\n    });\n  });\n  /**\n   * WP ColorPicker Alpha Color Picker Control\n   *\n   * @author Anthony Hortin <http://maddisondesigns.com>\n   * @license http://www.gnu.org/licenses/gpl-2.0.html\n   * @link https://github.com/maddisondesigns\n   */\n  // Manually initialise the wpColorPicker controls so we can add the color picker palette\n\n  $('.wpcolorpicker-alpha-color-picker').each(function (i, obj) {\n    var paletteColors = _wpCustomizeSettings.controls[$(this).attr('id')].colorpickerpalette;\n\n    var options = {\n      palettes: paletteColors\n    };\n    $(obj).wpColorPicker(options);\n  });\n  /**\n   * Alpha Color Picker Custom Control\n   *\n   * @author Braad Martin <http://braadmartin.com>\n   * @license http://www.gnu.org/licenses/gpl-3.0.html\n   * @link https://github.com/BraadMartin/components/tree/master/customizer/alpha-color-picker\n   */\n  // Loop over each control and transform it into our color picker.\n\n  $('.alpha-color-control').each(function () {\n    // Scope the vars.\n    var $control, startingColor, paletteInput, showOpacity, defaultColor, palette, colorPickerOptions, $container, $alphaSlider, alphaVal, sliderOptions; // Store the control instance.\n\n    $control = $(this); // Get a clean starting value for the option.\n\n    startingColor = $control.val().replace(/\\s+/g, ''); // Get some data off the control.\n\n    paletteInput = $control.attr('data-palette');\n    showOpacity = $control.attr('data-show-opacity');\n    defaultColor = $control.attr('data-default-color'); // Process the palette.\n\n    if (paletteInput.indexOf('|') !== -1) {\n      palette = paletteInput.split('|');\n    } else if ('false' == paletteInput) {\n      palette = false;\n    } else {\n      palette = true;\n    } // Set up the options that we'll pass to wpColorPicker().\n\n\n    colorPickerOptions = {\n      change: function change(event, ui) {\n        var key, value, alpha, $transparency;\n        key = $control.attr('data-customize-setting-link');\n        value = $control.wpColorPicker('color'); // Set the opacity value on the slider handle when the default color button is clicked.\n\n        if (defaultColor == value) {\n          alpha = acp_get_alpha_value_from_color(value);\n          $alphaSlider.find('.ui-slider-handle').text(alpha);\n        } // Send ajax request to wp.customize to trigger the Save action.\n\n\n        wp.customize(key, function (obj) {\n          obj.set(value);\n        });\n        $transparency = $container.find('.transparency'); // Always show the background color of the opacity slider at 100% opacity.\n\n        $transparency.css('background-color', ui.color.toString('no-alpha'));\n      },\n      palettes: palette // Use the passed in palette.\n\n    }; // Create the colorpicker.\n\n    $control.wpColorPicker(colorPickerOptions);\n    $container = $control.parents('.wp-picker-container:first'); // Insert our opacity slider.\n\n    $('<div class=\"alpha-color-picker-container\">' + '<div class=\"min-click-zone click-zone\"></div>' + '<div class=\"max-click-zone click-zone\"></div>' + '<div class=\"alpha-slider\"></div>' + '<div class=\"transparency\"></div>' + '</div>').appendTo($container.find('.wp-picker-holder'));\n    $alphaSlider = $container.find('.alpha-slider'); // If starting value is in format RGBa, grab the alpha channel.\n\n    alphaVal = acp_get_alpha_value_from_color(startingColor); // Set up jQuery UI slider() options.\n\n    sliderOptions = {\n      create: function create(event, ui) {\n        var value = $(this).slider('value'); // Set up initial values.\n\n        $(this).find('.ui-slider-handle').text(value);\n        $(this).siblings('.transparency ').css('background-color', startingColor);\n      },\n      value: alphaVal,\n      range: 'max',\n      step: 1,\n      min: 0,\n      max: 100,\n      animate: 300\n    }; // Initialize jQuery UI slider with our options.\n\n    $alphaSlider.slider(sliderOptions); // Maybe show the opacity on the handle.\n\n    if ('true' == showOpacity) {\n      $alphaSlider.find('.ui-slider-handle').addClass('show-opacity');\n    } // Bind event handlers for the click zones.\n\n\n    $container.find('.min-click-zone').on('click', function () {\n      acp_update_alpha_value_on_color_control(0, $control, $alphaSlider, true);\n    });\n    $container.find('.max-click-zone').on('click', function () {\n      acp_update_alpha_value_on_color_control(100, $control, $alphaSlider, true);\n    }); // Bind event handler for clicking on a palette color.\n\n    $container.find('.iris-palette').on('click', function () {\n      var color, alpha;\n      color = $(this).css('background-color');\n      alpha = acp_get_alpha_value_from_color(color);\n      acp_update_alpha_value_on_alpha_slider(alpha, $alphaSlider); // Sometimes Iris doesn't set a perfect background-color on the palette,\n      // for example rgba(20, 80, 100, 0.3) becomes rgba(20, 80, 100, 0.298039).\n      // To compensante for this we round the opacity value on RGBa colors here\n      // and save it a second time to the color picker object.\n\n      if (alpha != 100) {\n        color = color.replace(/[^,]+(?=\\))/, (alpha / 100).toFixed(2));\n      }\n\n      $control.wpColorPicker('color', color);\n    }); // Bind event handler for clicking on the 'Clear' button.\n\n    $container.find('.button.wp-picker-clear').on('click', function () {\n      var key = $control.attr('data-customize-setting-link'); // The #fff color is delibrate here. This sets the color picker to white instead of the\n      // defult black, which puts the color picker in a better place to visually represent empty.\n\n      $control.wpColorPicker('color', '#ffffff'); // Set the actual option value to empty string.\n\n      wp.customize(key, function (obj) {\n        obj.set('');\n      });\n      acp_update_alpha_value_on_alpha_slider(100, $alphaSlider);\n    }); // Bind event handler for clicking on the 'Default' button.\n\n    $container.find('.button.wp-picker-default').on('click', function () {\n      var alpha = acp_get_alpha_value_from_color(defaultColor);\n      acp_update_alpha_value_on_alpha_slider(alpha, $alphaSlider);\n    }); // Bind event handler for typing or pasting into the input.\n\n    $control.on('input', function () {\n      var value = $(this).val();\n      var alpha = acp_get_alpha_value_from_color(value);\n      acp_update_alpha_value_on_alpha_slider(alpha, $alphaSlider);\n    }); // Update all the things when the slider is interacted with.\n\n    $alphaSlider.slider().on('slide', function (event, ui) {\n      var alpha = parseFloat(ui.value) / 100.0;\n      acp_update_alpha_value_on_color_control(alpha, $control, $alphaSlider, false); // Change value shown on slider handle.\n\n      $(this).find('.ui-slider-handle').text(ui.value);\n    });\n  });\n  /**\n   * Override the stock color.js toString() method to add support for outputting RGBa or Hex.\n   */\n\n  Color.prototype.toString = function (flag) {\n    // If our no-alpha flag has been passed in, output RGBa value with 100% opacity.\n    // This is used to set the background color on the opacity slider during color changes.\n    if ('no-alpha' == flag) {\n      return this.toCSS('rgba', '1').replace(/\\s+/g, '');\n    } // If we have a proper opacity value, output RGBa.\n\n\n    if (1 > this._alpha) {\n      return this.toCSS('rgba', this._alpha).replace(/\\s+/g, '');\n    } // Proceed with stock color.js hex output.\n\n\n    var hex = parseInt(this._color, 10).toString(16);\n\n    if (this.error) {\n      return '';\n    }\n\n    if (hex.length < 6) {\n      for (var i = 6 - hex.length - 1; i >= 0; i--) {\n        hex = '0' + hex;\n      }\n    }\n\n    return '#' + hex;\n  };\n  /**\n   * Given an RGBa, RGB, or hex color value, return the alpha channel value.\n   */\n\n\n  function acp_get_alpha_value_from_color(value) {\n    var alphaVal; // Remove all spaces from the passed in value to help our RGBa regex.\n\n    value = value.replace(/ /g, '');\n\n    if (value.match(/rgba\\(\\d+\\,\\d+\\,\\d+\\,([^\\)]+)\\)/)) {\n      alphaVal = parseFloat(value.match(/rgba\\(\\d+\\,\\d+\\,\\d+\\,([^\\)]+)\\)/)[1]).toFixed(2) * 100;\n      alphaVal = parseInt(alphaVal);\n    } else {\n      alphaVal = 100;\n    }\n\n    return alphaVal;\n  }\n  /**\n   * Force update the alpha value of the color picker object and maybe the alpha slider.\n   */\n\n\n  function acp_update_alpha_value_on_color_control(alpha, $control, $alphaSlider, update_slider) {\n    var iris, colorPicker, color;\n    iris = $control.data('a8cIris');\n    colorPicker = $control.data('wpWpColorPicker'); // Set the alpha value on the Iris object.\n\n    iris._color._alpha = alpha; // Store the new color value.\n\n    color = iris._color.toString(); // Set the value of the input.\n\n    $control.val(color); // Update the background color of the color picker.\n\n    colorPicker.toggler.css({\n      'background-color': color\n    }); // Maybe update the alpha slider itself.\n\n    if (update_slider) {\n      acp_update_alpha_value_on_alpha_slider(alpha, $alphaSlider);\n    } // Update the color value of the color picker object.\n\n\n    $control.wpColorPicker('color', color);\n  }\n  /**\n   * Update the slider handle position and label.\n   */\n\n\n  function acp_update_alpha_value_on_alpha_slider(alpha, $alphaSlider) {\n    $alphaSlider.slider('value', alpha);\n    $alphaSlider.find('.ui-slider-handle').text(alpha.toString());\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/scripts/customizer.js\n");

/***/ }),

/***/ "jquery":
/*!*************************!*\
  !*** external "jQuery" ***!
  \*************************/
/***/ (function(module) {

"use strict";
module.exports = window["jQuery"];

/***/ })

},
/******/ function(__webpack_require__) { // webpackRuntimeModules
/******/ "use strict";
/******/ 
/******/ var __webpack_exec__ = function(moduleId) { return __webpack_require__(__webpack_require__.s = moduleId); }
/******/ __webpack_require__.O(0, ["/scripts/vendor"], function() { return __webpack_exec__("./resources/scripts/customizer.js"); });
/******/ var __webpack_exports__ = __webpack_require__.O();
/******/ }
]);